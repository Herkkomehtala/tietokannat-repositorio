{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tietokantakurssin dokumentaatio Hei! Olen Herkko Meht\u00e4l\u00e4 ja t\u00e4\u00e4lt\u00e4 l\u00f6yd\u00e4t luomani dokumentaatiot tietokantojen kurssille. T\u00e4m\u00e4 sivusto sis\u00e4lt\u00e4\u00e4 p\u00e4\u00e4osin tietokantakurssin teht\u00e4v\u00e4t ja muistiinpanot. T\u00e4m\u00e4 sivusto on automaattisesti luotu repositorion markdown-tiedostoista. Repositorio T\u00e4m\u00e4n sivuston repositorion l\u00f6yd\u00e4t t\u00e4\u00e4lt\u00e4.","title":"Tietokantakurssin dokumentaatio"},{"location":"#tietokantakurssin-dokumentaatio","text":"Hei! Olen Herkko Meht\u00e4l\u00e4 ja t\u00e4\u00e4lt\u00e4 l\u00f6yd\u00e4t luomani dokumentaatiot tietokantojen kurssille. T\u00e4m\u00e4 sivusto sis\u00e4lt\u00e4\u00e4 p\u00e4\u00e4osin tietokantakurssin teht\u00e4v\u00e4t ja muistiinpanot. T\u00e4m\u00e4 sivusto on automaattisesti luotu repositorion markdown-tiedostoista.","title":"Tietokantakurssin dokumentaatio"},{"location":"#repositorio","text":"T\u00e4m\u00e4n sivuston repositorion l\u00f6yd\u00e4t t\u00e4\u00e4lt\u00e4.","title":"Repositorio"},{"location":"Harjoitus1/","text":"Ymp\u00e4rist\u00f6n pystytys Ensin asennan MySQL/MariaDB osana XAMPPia ja k\u00e4ynnist\u00e4n MySQL servicen: T\u00e4m\u00e4n j\u00e4lkeen asennan MySQL workbench: Asennuksen j\u00e4lkeen luon uuden yhteyhden painamalla pient\u00e4 + n\u00e4pp\u00e4int\u00e4. T\u00e4h\u00e4n tulee seuraavat tiedot: Connection Name: tietokannat_db Hostname: 127.0.0.1 Port: 3306 Username: root (XAMPPin MySQLin oletusp\u00e4\u00e4k\u00e4ytt\u00e4j\u00e4) Password: [Store in Vault] (Klikkaa t\u00e4t\u00e4 ja j\u00e4t\u00e4 salasanakentt\u00e4 tyhj\u00e4ksi, se on oletusarvo) Painan OK ja painan uutta yhteytt\u00e4 joka on nyt luotu. Uudessa ikkunassa luon uuden databasen klikkaamalla punaisella merkitty\u00e4 create a new schema -painiketta. Kirjoitan tietokannan nimeksi student_db ja painan apply/apply/finish Uusi tietokanta ilmestyi minun navigator-ikkunaan. Valitsen sen minun oletustietokannaksi painamalla hiiren kakkospainiketta ja valitsemalla Set as Default Schema . Nyt t\u00e4m\u00e4 tietokanta on lihavoitu ja kaikki toimintoni (Esim suorittamani SQL-lauseet) kohdistuvat oletusarvoisesti siihen. Valitsen painikerivin vasemmanpuoleisen punaisella merkitty Create a new SQL tab for executing queries -painiketta avatakseni SQL-tabin jotta voin suorittaa SQL-lauseita. Lis\u00e4\u00e4n opintojaksolla k\u00e4ytett\u00e4v\u00e4n esimerkkitietokannan kopioimalla sen SQL-tabiin ja suorittamalla kaikki SQL-lauseet punaisella merkityll\u00e4 salama -painikkeella: T\u00e4m\u00e4n j\u00e4lkeen n\u00e4en, ett\u00e4 lauseiden suoritus onnistui: N\u00e4hd\u00e4kseni lis\u00e4tyn sis\u00e4ll\u00f6n valitsen oheisen kuvan mukaisesti esimerkiksi cities -taulu hiiren kakkospainikkeella ja valitsen Select all rows : HUOM! Aiheuttamat muutokset eiv\u00e4t aina n\u00e4y reaaliaikaisesti Worbenchin eri ikkunoissa. Klikkaa haluttua objektia (esim Tables) hiiren kakkospainikkeella ja valitse Refresh All n\u00e4hd\u00e4ksesi ajantaisen sis\u00e4ll\u00f6n. T\u00e4st\u00e4 n\u00e4en, ett\u00e4 olen luonut esimerkkitietokannan onnistuneesti! SQL-kyselyjen suorittaminen Workbenchiss\u00e4 T\u00e4m\u00e4 osio ei ole osa harjoitusta, vaan henkil\u00f6kohtainen muistio liittyen SQL-kyselyjen suorittamiseen. Teht\u00e4v\u00e4 2 on alempana. Yleisimminkin SQL-kyselyj\u00e4 suoritetaan Workbenchiss\u00e4 t\u00e4sm\u00e4lleen samoin kuin edell\u00e4 kohdassa uuden tietokannan luominen. Kyselyj\u00e4 suoritetaan seuraavasti: Valitse haluamasi tietokanta oletustietokannaksi valitsemalla se hiiren kakkospainikkeella Set as Default Schema . T\u00e4ll\u00f6in valitsemasi tietokanta n\u00e4kyy lihavoituna ja kaikki toimintosi (esim. suorittamasi SQL-lauseet) kohdistuvat oletusarvoisesti siihen. Valitse painikerivin vasemmanpuoleisen ohessa keltaisella merkitty Create a new SQL tab for executing queries -painike avataksesi SQL-tabin suorittaaksesi SQL-lauseita. Kirjoita haluamasi SQL-kysely ikkunaan ja klikkaa vihre\u00e4ksi merkitty\u00e4 salama -painiketta suorittaaksesi kyselyn. Tulokset ilmestyv\u00e4t ikkunaan alle. Tulosjoukon voit halutessasi tallentaa tekstimuodossa. Harjoitus 1 - Teht\u00e4v\u00e4 2 Liityn Labranet :iin VPN -yhteydell\u00e4 ja luon uuden tietokannan osoitteessa https://mariadb.labranet.jamk.fi/ : T\u00e4m\u00e4n j\u00e4lkeen avaan Workbench -ohjelman ja luon uuden yhteyden t\u00e4h\u00e4n uuteen tietokantaan. Asetukset ovat: Connection Name: Labranet_mariadb Hostname: mariadb.labranet.jamk.fi Port: 3306 Username: N1234 (Sinun oma opiskelijatunnus) Password: [Store in Vault] (Klikkaa t\u00e4t\u00e4 ja sy\u00f6t\u00e4 kohdassa 1 generoitu salasana t\u00e4h\u00e4n) HUOM! Labranetin MariaDB-j\u00e4rjestelm\u00e4\u00e4n voit luoda vain nelj\u00e4 ennalta nimelt\u00e4\u00e4n ennalta m\u00e4\u00e4r\u00e4tty\u00e4 tietokantaa. Jos labraverkon k\u00e4ytt\u00e4j\u00e4tunnuksesi on N1234, niin voit luoda ja poistaa seuraavan nimisi\u00e4 tietokantoja: N1234 N1234_1 N1234_2 N1234_3 T\u00e4ss\u00e4 tapauksessa tietokannan nimeksi tulee AA2958 . Luon uuden esimerkkitietokannan kuten Teht\u00e4v\u00e4 1 :ss\u00e4. T\u00e4m\u00e4n j\u00e4lkeen suoritan seuraavat SQL -kyselyt: SELECT * FROM students; SELECT * FROM courses; Tuloksena on: N\u00e4ytt\u00e4\u00e4 silt\u00e4, ett\u00e4 minun SQL -kyselyni onnistui!","title":"Ymp\u00e4rist\u00f6n pystytys"},{"location":"Harjoitus1/#ympariston-pystytys","text":"Ensin asennan MySQL/MariaDB osana XAMPPia ja k\u00e4ynnist\u00e4n MySQL servicen: T\u00e4m\u00e4n j\u00e4lkeen asennan MySQL workbench: Asennuksen j\u00e4lkeen luon uuden yhteyhden painamalla pient\u00e4 + n\u00e4pp\u00e4int\u00e4. T\u00e4h\u00e4n tulee seuraavat tiedot: Connection Name: tietokannat_db Hostname: 127.0.0.1 Port: 3306 Username: root (XAMPPin MySQLin oletusp\u00e4\u00e4k\u00e4ytt\u00e4j\u00e4) Password: [Store in Vault] (Klikkaa t\u00e4t\u00e4 ja j\u00e4t\u00e4 salasanakentt\u00e4 tyhj\u00e4ksi, se on oletusarvo) Painan OK ja painan uutta yhteytt\u00e4 joka on nyt luotu. Uudessa ikkunassa luon uuden databasen klikkaamalla punaisella merkitty\u00e4 create a new schema -painiketta. Kirjoitan tietokannan nimeksi student_db ja painan apply/apply/finish Uusi tietokanta ilmestyi minun navigator-ikkunaan. Valitsen sen minun oletustietokannaksi painamalla hiiren kakkospainiketta ja valitsemalla Set as Default Schema . Nyt t\u00e4m\u00e4 tietokanta on lihavoitu ja kaikki toimintoni (Esim suorittamani SQL-lauseet) kohdistuvat oletusarvoisesti siihen. Valitsen painikerivin vasemmanpuoleisen punaisella merkitty Create a new SQL tab for executing queries -painiketta avatakseni SQL-tabin jotta voin suorittaa SQL-lauseita. Lis\u00e4\u00e4n opintojaksolla k\u00e4ytett\u00e4v\u00e4n esimerkkitietokannan kopioimalla sen SQL-tabiin ja suorittamalla kaikki SQL-lauseet punaisella merkityll\u00e4 salama -painikkeella: T\u00e4m\u00e4n j\u00e4lkeen n\u00e4en, ett\u00e4 lauseiden suoritus onnistui: N\u00e4hd\u00e4kseni lis\u00e4tyn sis\u00e4ll\u00f6n valitsen oheisen kuvan mukaisesti esimerkiksi cities -taulu hiiren kakkospainikkeella ja valitsen Select all rows : HUOM! Aiheuttamat muutokset eiv\u00e4t aina n\u00e4y reaaliaikaisesti Worbenchin eri ikkunoissa. Klikkaa haluttua objektia (esim Tables) hiiren kakkospainikkeella ja valitse Refresh All n\u00e4hd\u00e4ksesi ajantaisen sis\u00e4ll\u00f6n. T\u00e4st\u00e4 n\u00e4en, ett\u00e4 olen luonut esimerkkitietokannan onnistuneesti!","title":"Ymp\u00e4rist\u00f6n pystytys"},{"location":"Harjoitus1/#sql-kyselyjen-suorittaminen-workbenchissa","text":"T\u00e4m\u00e4 osio ei ole osa harjoitusta, vaan henkil\u00f6kohtainen muistio liittyen SQL-kyselyjen suorittamiseen. Teht\u00e4v\u00e4 2 on alempana. Yleisimminkin SQL-kyselyj\u00e4 suoritetaan Workbenchiss\u00e4 t\u00e4sm\u00e4lleen samoin kuin edell\u00e4 kohdassa uuden tietokannan luominen. Kyselyj\u00e4 suoritetaan seuraavasti: Valitse haluamasi tietokanta oletustietokannaksi valitsemalla se hiiren kakkospainikkeella Set as Default Schema . T\u00e4ll\u00f6in valitsemasi tietokanta n\u00e4kyy lihavoituna ja kaikki toimintosi (esim. suorittamasi SQL-lauseet) kohdistuvat oletusarvoisesti siihen. Valitse painikerivin vasemmanpuoleisen ohessa keltaisella merkitty Create a new SQL tab for executing queries -painike avataksesi SQL-tabin suorittaaksesi SQL-lauseita. Kirjoita haluamasi SQL-kysely ikkunaan ja klikkaa vihre\u00e4ksi merkitty\u00e4 salama -painiketta suorittaaksesi kyselyn. Tulokset ilmestyv\u00e4t ikkunaan alle. Tulosjoukon voit halutessasi tallentaa tekstimuodossa.","title":"SQL-kyselyjen suorittaminen Workbenchiss\u00e4"},{"location":"Harjoitus1/#harjoitus-1-tehtava-2","text":"Liityn Labranet :iin VPN -yhteydell\u00e4 ja luon uuden tietokannan osoitteessa https://mariadb.labranet.jamk.fi/ : T\u00e4m\u00e4n j\u00e4lkeen avaan Workbench -ohjelman ja luon uuden yhteyden t\u00e4h\u00e4n uuteen tietokantaan. Asetukset ovat: Connection Name: Labranet_mariadb Hostname: mariadb.labranet.jamk.fi Port: 3306 Username: N1234 (Sinun oma opiskelijatunnus) Password: [Store in Vault] (Klikkaa t\u00e4t\u00e4 ja sy\u00f6t\u00e4 kohdassa 1 generoitu salasana t\u00e4h\u00e4n) HUOM! Labranetin MariaDB-j\u00e4rjestelm\u00e4\u00e4n voit luoda vain nelj\u00e4 ennalta nimelt\u00e4\u00e4n ennalta m\u00e4\u00e4r\u00e4tty\u00e4 tietokantaa. Jos labraverkon k\u00e4ytt\u00e4j\u00e4tunnuksesi on N1234, niin voit luoda ja poistaa seuraavan nimisi\u00e4 tietokantoja: N1234 N1234_1 N1234_2 N1234_3 T\u00e4ss\u00e4 tapauksessa tietokannan nimeksi tulee AA2958 . Luon uuden esimerkkitietokannan kuten Teht\u00e4v\u00e4 1 :ss\u00e4. T\u00e4m\u00e4n j\u00e4lkeen suoritan seuraavat SQL -kyselyt: SELECT * FROM students; SELECT * FROM courses; Tuloksena on: N\u00e4ytt\u00e4\u00e4 silt\u00e4, ett\u00e4 minun SQL -kyselyni onnistui!","title":"Harjoitus 1 - Teht\u00e4v\u00e4 2"},{"location":"Harjoitus2/","text":"SQL-perusteet Aloitan luomalla yhteyden minun henkil\u00f6kohtaiseen MariaDB palvelimeen joka on JAMKissa. Teht\u00e4v\u00e4n\u00e4 on saada A) Kaikki kaupungit (cities) kaikki sarakkeet n\u00e4kyviin. T\u00e4m\u00e4n voi suorittaa SQL-kyselyll\u00e4 SELECT * FROM cities T\u00e4st\u00e4 tulee tulos: B) Hae kaikkien kaupunkien nimet ja asukasluvut. Lajittele asukasm\u00e4\u00e4r\u00e4n mukaan pienimm\u00e4st\u00e4 suurimpaan. T\u00e4m\u00e4n voi suorittaa seuraavalla kyselyll\u00e4: SELECT cityname, population FROM cities ORDER BY population Tulos n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: C) Mit\u00e4 eri silmien v\u00e4rej\u00e4 opiskelijoilla on? Kukin v\u00e4ri saa tulostua vain kerran ja tulosjoukossa saa olla vain yksi sarake. T\u00e4m\u00e4n voi tehd\u00e4 esimerkiksi seuraavalla kyselyll\u00e4: SELECT DISTINCT eyecolor FROM students Tulos n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: D) Hae opiskelijoiden suku- ja etunimet, silmien v\u00e4ri ja tulot (incomes): incomes-sarakkeen otsikoksi pit\u00e4\u00e4 tulla Vuosipalkka. T\u00e4m\u00e4n voi suorittaa kyselyll\u00e4: SELECT firstname, lastname, eyecolor, incomes AS 'Vuosipalkka' FROM students; Tulos n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: E) Lajittele edellinen teht\u00e4v\u00e4 ensijaisesti suku ja toissijaisesti etunimen mukaan kummatkin laskevassa j\u00e4rjestyksess\u00e4 (k\u00e4\u00e4nteinen aakkosj\u00e4rjestys). T\u00e4m\u00e4 voidaan suorittaa kyselyll\u00e4: SELECT firstname, lastname, eyecolor, incomes AS 'Vuosipalkka' FROM students ORDER BY lastname DESC, firstname DESC; Tulos n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: Harjoitus 2 - Teht\u00e4v\u00e4 2 Aloitan yhdist\u00e4m\u00e4ll\u00e4 minun paikalliseen tietokantaan komentorivilt\u00e4: A) Hae niiden opiskelijoiden suku- ja etunimet, joiden silmien v\u00e4ri on 'Sininen'. Komentona k\u00e4y t\u00e4h\u00e4n esimerkiksi: SELECT firstname, lastname FROM students WHERE eyecolor = 'Sininen'; T\u00e4lt\u00e4 n\u00e4ytt\u00e4\u00e4 tulos: B) Listaa ne opiskelijat, joilla on pienemm\u00e4t tulot kuin 14010.22? Hae nimet ja tulot. T\u00e4h\u00e4n k\u00e4y komento: SELECT firstname, lastname, incomes FROM students WHERE incomes < 14010.22; T\u00e4lt\u00e4 n\u00e4ytt\u00e4\u00e4 tulos: C) Listaa ne opiskelijat, joilla on pienemm\u00e4t tai yht\u00e4suuret tulot kuin 14010.22? Hae nimet ja tulot. Lajittele palkan mukaan laskevasti. T\u00e4m\u00e4n voi tehd\u00e4 muuttamalla edellist\u00e4 komentoa hieman: SELECT firstname, lastname, incomes FROM students WHERE incomes <= 14010.22 ORDER BY incomes DESC; D) Hae ne turkulaiset (hometown = 1) opiskelijat, joiden silmien v\u00e4ri on Sininen. Tulosta sarakkeet studentID , lastname , firstname , eyecolor ja hometown (kokonaisluku). T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT hometown, studentID, firstname, lastname, eyecolor FROM students WHERE eyecolor = 'Sininen' AND hometown = '1'; T\u00e4lt\u00e4 n\u00e4ytt\u00e4\u00e4 tulos: E) Listaa kaikki turkulaiset opiskelijat ja heid\u00e4n lis\u00e4ksi kaikki silmien v\u00e4rilt\u00e4\u00e4n harmaat. Tulosta kaikki sarakkeet. T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT firstname, lastname, hometown, eyecolor FROM students WHERE eyecolor = 'Harmaa' AND hometown = '1'; T\u00e4lt\u00e4 n\u00e4ytt\u00e4\u00e4 tulos: Harjoitus 2 - Teht\u00e4v\u00e4 3 Aloitan asentamalla HeidiSQL:n portable version koneelleni ja k\u00e4ynnist\u00e4m\u00e4ll\u00e4 HS:n session managerin: T\u00e4m\u00e4n j\u00e4lkeen luon yhteyden minun tietokantaan. A) Hae kaikki sarakkeet opiskelijoista, joiden veroprosentti (taxrate) ei ole 0.00 T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT * FROM students WHERE taxrate != '0.00'; T\u00e4st\u00e4 tulee tulos: B) Hae turkulaisista tai tamperelaisista opiskelijoista ne, joiden tulot ovat yli 14000. T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT * FROM students WHERE hometown = '1' OR hometown = '2' AND incomes > 14000; T\u00e4st\u00e4 tulee tulos: C) Hae opiskelijat, joiden veroprosentti on 0.00, 6.20 tai 7.30 (k\u00e4yt\u00e4 IN-m\u00e4\u00e4rett\u00e4) T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT * FROM students WHERE taxrate IN (0.00, 6.20, 7.30); T\u00e4st\u00e4 tulee tulos: D) Hae opiskelijat, joiden kotikunta ei ole tiedossa (on NULL) T\u00e4m\u00e4n voi suorittaa komennolla: SELECT * FROM students WHERE hometown IS NULL; T\u00e4st\u00e4 tulee tulos: E) Hae opiskelijat, joiden silmien v\u00e4rin EI tiedet\u00e4 olevan 'Sininen'. T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT * FROM students WHERE eyecolor != 'Sininen'; T\u00e4st\u00e4 syntyy tulos: Harjoitus 2 - Teht\u00e4v\u00e4 4 Suoritan t\u00e4m\u00e4n teht\u00e4v\u00e4n DBeaverilla. DBeaver on \"Multiplatform database tool\" joka tukee useita tietokantoja, mukaanlukien MariaDB:t\u00e4. Community edition on ilmainen ja open-source, joten k\u00e4yt\u00e4n t\u00e4t\u00e4 versiota. K\u00e4ynnist\u00e4n DBeaverin ja luon yhteyden minun tietokantaan: T\u00e4m\u00e4n j\u00e4lkeen asetan student_db:n oletus tietokannaksi. A) Hae kaikki kaupungit (cities); kaikki sarakkeet n\u00e4kyviin T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT * FROM cities; T\u00e4st\u00e4 syntyy tulos: B) Hae kaikkien kaupunkien nimet ja asukasluvut. Lajittele asukasm\u00e4\u00e4r\u00e4n mukaan pienimm\u00e4st\u00e4 suurimpaan. T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT cityname, population FROM cities ORDER BY population; T\u00e4st\u00e4 syntyy tulos: C) Mit\u00e4 eri silmien v\u00e4rej\u00e4 opiskelijoilla on? Kukin v\u00e4ri saa tulostua vain kerran ja tulosjoukossa saa olla vain yksi sarake. T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT DISTINCT eyecolor FROM students; T\u00e4st\u00e4 tulee tulos: D) Hae opiskelijoiden suku- ja etunimet, silmien v\u00e4ri ja tulot (incomes): incomes-sarakkeen otsikoksi pit\u00e4\u00e4 tulla Vuosipalkka. T\u00e4m\u00e4n voi suorittaa komennolla: SELECT firstname, lastname, eyecolor, incomes AS 'Vuosipalkka' FROM students; T\u00e4st\u00e4 syntyy tulos: E) Lajittele edellinen teht\u00e4v\u00e4 ensijaisesti suku ja toissijaisesti etunimen mukaan kummatkin laskevassa j\u00e4rjestyksess\u00e4 (k\u00e4\u00e4nteinen aakkosj\u00e4rjestys) T\u00e4m\u00e4n voi suorittaa komennolla: SELECT firstname, lastname, eyecolor, incomes AS 'Vuosipalkka' FROM students ORDER BY lastname DESC, firstname DESC; T\u00e4st\u00e4 syntyy tulos: Harjoitus 2 - Teht\u00e4v\u00e4 5 Vertaile ytimekk\u00e4\u00e4sti (2-5 virkett\u00e4) mysql-, MySQL Workbench- ja HeidiSQL-ohjelmien ensik\u00e4ytt\u00f6kokemuksia ja soveltuvuutta eri k\u00e4ytt\u00f6tarpeisiin. MySQL Workbench on tyylikk\u00e4in ja helpoiten osattava ohjelma. Siin\u00e4 on intuitiivinen UI joka helpottaa ensikertalaisen kokemusta. HeidiSQL on ilmainen, open-source ohjelma jossa on kattava valikoima ty\u00f6kaluja. Ongelmana on hieman sekainen UI jossa on paljon erinv\u00e4risi\u00e4 nappeja ja lahjoituspyynt\u00f6j\u00e4. DBeaver tukee hyvin monia eri tietokantoja ja siin\u00e4 on useita valmiita teemoja joka on hieno lis\u00e4ys. MySQL komentolinjalta oli kaikista yksinkertaisin ja \"lightweight\" -ratkaisu joka on jossain tapauksissa suotavaa. Kaikki mainitut ratkaisut tukevat et\u00e4yhteyksi\u00e4 ainakin jollain tavalla. Jos minun pit\u00e4isi tehd\u00e4 yksinkertaisia muutoksia tai tarkistaa jotain nopeasti, niin tekisin sen mieluiten komentolinjalta. Isommat operaatiot tekisin mieluiten edell\u00e4mainituilla ohjelmilla.","title":"SQL-perusteet"},{"location":"Harjoitus2/#sql-perusteet","text":"Aloitan luomalla yhteyden minun henkil\u00f6kohtaiseen MariaDB palvelimeen joka on JAMKissa. Teht\u00e4v\u00e4n\u00e4 on saada A) Kaikki kaupungit (cities) kaikki sarakkeet n\u00e4kyviin. T\u00e4m\u00e4n voi suorittaa SQL-kyselyll\u00e4 SELECT * FROM cities T\u00e4st\u00e4 tulee tulos: B) Hae kaikkien kaupunkien nimet ja asukasluvut. Lajittele asukasm\u00e4\u00e4r\u00e4n mukaan pienimm\u00e4st\u00e4 suurimpaan. T\u00e4m\u00e4n voi suorittaa seuraavalla kyselyll\u00e4: SELECT cityname, population FROM cities ORDER BY population Tulos n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: C) Mit\u00e4 eri silmien v\u00e4rej\u00e4 opiskelijoilla on? Kukin v\u00e4ri saa tulostua vain kerran ja tulosjoukossa saa olla vain yksi sarake. T\u00e4m\u00e4n voi tehd\u00e4 esimerkiksi seuraavalla kyselyll\u00e4: SELECT DISTINCT eyecolor FROM students Tulos n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: D) Hae opiskelijoiden suku- ja etunimet, silmien v\u00e4ri ja tulot (incomes): incomes-sarakkeen otsikoksi pit\u00e4\u00e4 tulla Vuosipalkka. T\u00e4m\u00e4n voi suorittaa kyselyll\u00e4: SELECT firstname, lastname, eyecolor, incomes AS 'Vuosipalkka' FROM students; Tulos n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: E) Lajittele edellinen teht\u00e4v\u00e4 ensijaisesti suku ja toissijaisesti etunimen mukaan kummatkin laskevassa j\u00e4rjestyksess\u00e4 (k\u00e4\u00e4nteinen aakkosj\u00e4rjestys). T\u00e4m\u00e4 voidaan suorittaa kyselyll\u00e4: SELECT firstname, lastname, eyecolor, incomes AS 'Vuosipalkka' FROM students ORDER BY lastname DESC, firstname DESC; Tulos n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4:","title":"SQL-perusteet"},{"location":"Harjoitus2/#harjoitus-2-tehtava-2","text":"Aloitan yhdist\u00e4m\u00e4ll\u00e4 minun paikalliseen tietokantaan komentorivilt\u00e4: A) Hae niiden opiskelijoiden suku- ja etunimet, joiden silmien v\u00e4ri on 'Sininen'. Komentona k\u00e4y t\u00e4h\u00e4n esimerkiksi: SELECT firstname, lastname FROM students WHERE eyecolor = 'Sininen'; T\u00e4lt\u00e4 n\u00e4ytt\u00e4\u00e4 tulos: B) Listaa ne opiskelijat, joilla on pienemm\u00e4t tulot kuin 14010.22? Hae nimet ja tulot. T\u00e4h\u00e4n k\u00e4y komento: SELECT firstname, lastname, incomes FROM students WHERE incomes < 14010.22; T\u00e4lt\u00e4 n\u00e4ytt\u00e4\u00e4 tulos: C) Listaa ne opiskelijat, joilla on pienemm\u00e4t tai yht\u00e4suuret tulot kuin 14010.22? Hae nimet ja tulot. Lajittele palkan mukaan laskevasti. T\u00e4m\u00e4n voi tehd\u00e4 muuttamalla edellist\u00e4 komentoa hieman: SELECT firstname, lastname, incomes FROM students WHERE incomes <= 14010.22 ORDER BY incomes DESC; D) Hae ne turkulaiset (hometown = 1) opiskelijat, joiden silmien v\u00e4ri on Sininen. Tulosta sarakkeet studentID , lastname , firstname , eyecolor ja hometown (kokonaisluku). T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT hometown, studentID, firstname, lastname, eyecolor FROM students WHERE eyecolor = 'Sininen' AND hometown = '1'; T\u00e4lt\u00e4 n\u00e4ytt\u00e4\u00e4 tulos: E) Listaa kaikki turkulaiset opiskelijat ja heid\u00e4n lis\u00e4ksi kaikki silmien v\u00e4rilt\u00e4\u00e4n harmaat. Tulosta kaikki sarakkeet. T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT firstname, lastname, hometown, eyecolor FROM students WHERE eyecolor = 'Harmaa' AND hometown = '1'; T\u00e4lt\u00e4 n\u00e4ytt\u00e4\u00e4 tulos:","title":"Harjoitus 2 - Teht\u00e4v\u00e4 2"},{"location":"Harjoitus2/#harjoitus-2-tehtava-3","text":"Aloitan asentamalla HeidiSQL:n portable version koneelleni ja k\u00e4ynnist\u00e4m\u00e4ll\u00e4 HS:n session managerin: T\u00e4m\u00e4n j\u00e4lkeen luon yhteyden minun tietokantaan. A) Hae kaikki sarakkeet opiskelijoista, joiden veroprosentti (taxrate) ei ole 0.00 T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT * FROM students WHERE taxrate != '0.00'; T\u00e4st\u00e4 tulee tulos: B) Hae turkulaisista tai tamperelaisista opiskelijoista ne, joiden tulot ovat yli 14000. T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT * FROM students WHERE hometown = '1' OR hometown = '2' AND incomes > 14000; T\u00e4st\u00e4 tulee tulos: C) Hae opiskelijat, joiden veroprosentti on 0.00, 6.20 tai 7.30 (k\u00e4yt\u00e4 IN-m\u00e4\u00e4rett\u00e4) T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT * FROM students WHERE taxrate IN (0.00, 6.20, 7.30); T\u00e4st\u00e4 tulee tulos: D) Hae opiskelijat, joiden kotikunta ei ole tiedossa (on NULL) T\u00e4m\u00e4n voi suorittaa komennolla: SELECT * FROM students WHERE hometown IS NULL; T\u00e4st\u00e4 tulee tulos: E) Hae opiskelijat, joiden silmien v\u00e4rin EI tiedet\u00e4 olevan 'Sininen'. T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT * FROM students WHERE eyecolor != 'Sininen'; T\u00e4st\u00e4 syntyy tulos:","title":"Harjoitus 2 - Teht\u00e4v\u00e4 3"},{"location":"Harjoitus2/#harjoitus-2-tehtava-4","text":"Suoritan t\u00e4m\u00e4n teht\u00e4v\u00e4n DBeaverilla. DBeaver on \"Multiplatform database tool\" joka tukee useita tietokantoja, mukaanlukien MariaDB:t\u00e4. Community edition on ilmainen ja open-source, joten k\u00e4yt\u00e4n t\u00e4t\u00e4 versiota. K\u00e4ynnist\u00e4n DBeaverin ja luon yhteyden minun tietokantaan: T\u00e4m\u00e4n j\u00e4lkeen asetan student_db:n oletus tietokannaksi. A) Hae kaikki kaupungit (cities); kaikki sarakkeet n\u00e4kyviin T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT * FROM cities; T\u00e4st\u00e4 syntyy tulos: B) Hae kaikkien kaupunkien nimet ja asukasluvut. Lajittele asukasm\u00e4\u00e4r\u00e4n mukaan pienimm\u00e4st\u00e4 suurimpaan. T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT cityname, population FROM cities ORDER BY population; T\u00e4st\u00e4 syntyy tulos: C) Mit\u00e4 eri silmien v\u00e4rej\u00e4 opiskelijoilla on? Kukin v\u00e4ri saa tulostua vain kerran ja tulosjoukossa saa olla vain yksi sarake. T\u00e4m\u00e4n voi tehd\u00e4 komennolla: SELECT DISTINCT eyecolor FROM students; T\u00e4st\u00e4 tulee tulos: D) Hae opiskelijoiden suku- ja etunimet, silmien v\u00e4ri ja tulot (incomes): incomes-sarakkeen otsikoksi pit\u00e4\u00e4 tulla Vuosipalkka. T\u00e4m\u00e4n voi suorittaa komennolla: SELECT firstname, lastname, eyecolor, incomes AS 'Vuosipalkka' FROM students; T\u00e4st\u00e4 syntyy tulos: E) Lajittele edellinen teht\u00e4v\u00e4 ensijaisesti suku ja toissijaisesti etunimen mukaan kummatkin laskevassa j\u00e4rjestyksess\u00e4 (k\u00e4\u00e4nteinen aakkosj\u00e4rjestys) T\u00e4m\u00e4n voi suorittaa komennolla: SELECT firstname, lastname, eyecolor, incomes AS 'Vuosipalkka' FROM students ORDER BY lastname DESC, firstname DESC; T\u00e4st\u00e4 syntyy tulos:","title":"Harjoitus 2 - Teht\u00e4v\u00e4 4"},{"location":"Harjoitus2/#harjoitus-2-tehtava-5","text":"Vertaile ytimekk\u00e4\u00e4sti (2-5 virkett\u00e4) mysql-, MySQL Workbench- ja HeidiSQL-ohjelmien ensik\u00e4ytt\u00f6kokemuksia ja soveltuvuutta eri k\u00e4ytt\u00f6tarpeisiin. MySQL Workbench on tyylikk\u00e4in ja helpoiten osattava ohjelma. Siin\u00e4 on intuitiivinen UI joka helpottaa ensikertalaisen kokemusta. HeidiSQL on ilmainen, open-source ohjelma jossa on kattava valikoima ty\u00f6kaluja. Ongelmana on hieman sekainen UI jossa on paljon erinv\u00e4risi\u00e4 nappeja ja lahjoituspyynt\u00f6j\u00e4. DBeaver tukee hyvin monia eri tietokantoja ja siin\u00e4 on useita valmiita teemoja joka on hieno lis\u00e4ys. MySQL komentolinjalta oli kaikista yksinkertaisin ja \"lightweight\" -ratkaisu joka on jossain tapauksissa suotavaa. Kaikki mainitut ratkaisut tukevat et\u00e4yhteyksi\u00e4 ainakin jollain tavalla. Jos minun pit\u00e4isi tehd\u00e4 yksinkertaisia muutoksia tai tarkistaa jotain nopeasti, niin tekisin sen mieluiten komentolinjalta. Isommat operaatiot tekisin mieluiten edell\u00e4mainituilla ohjelmilla.","title":"Harjoitus 2 - Teht\u00e4v\u00e4 5"},{"location":"Harjoitus3/","text":"Tietokantojen suunnittelu Harjoitus 3 - Teht\u00e4v\u00e4 1 Suunnittele tietokantaratkaisu t\u00e4m\u00e4n opintojakson harjoitusteht\u00e4vien palauttamiselle tarkoitetulle ScoreTronic-palvelulle. Opiskelijat palauttavat viikottain harjoitusteht\u00e4v\u00e4sarjaan kuuluvat teht\u00e4v\u00e4ns\u00e4. Harjoitusteht\u00e4v\u00e4sarja koostuu useista harjoitusteht\u00e4v\u00e4st\u00e4. Tietty harjoitusteht\u00e4v\u00e4 voi kuulua VAIN yhteen harjoitusteht\u00e4v\u00e4sarjaan. Yksitt\u00e4isell\u00e4 harjoitusteht\u00e4v\u00e4ll\u00e4 on m\u00e4\u00e4ritelty maksimipisteet. Opiskelija tekee jokaiselle teht\u00e4v\u00e4lleen piste-ehdotuksen ja opettaja lopulta p\u00e4\u00e4tt\u00e4\u00e4 pisteet. Opiskelijasta pit\u00e4\u00e4 tiet\u00e4\u00e4 opiskelijatunnus ja nimi. K\u00e4sitteit\u00e4: Opiskelija - Nimi - Opiskelijatunnus Harjoitusteht\u00e4v\u00e4sarja - Harjoitusteht\u00e4v\u00e4(t) - Viimeinen palautusp\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 - Max pisteet - Lopulliset pisteet Harjoitusteht\u00e4v\u00e4 - Mik\u00e4 teht\u00e4v\u00e4 - Max pisteet - Ehdotetut pisteet - Lopulliset pisteet - Palauttajat (Opiskelijat) Huomattavana Harjoitusteht\u00e4v\u00e4 -osiossa on palauttajat . Yksitt\u00e4iseen harjoitusteht\u00e4v\u00e4\u00e4n on mahdollista lis\u00e4t\u00e4 enemm\u00e4n kuin yksi palauttaja. T\u00e4m\u00e4 sallii esim.: Ryhm\u00e4t\u00f6iden palauttamisen. N\u00e4ist\u00e4 tiedoista voin suunnitella k\u00e4sitemallin. K\u00e4yt\u00e4n apunani Draw.io sivustoa. Yksil\u00f6n (Entity) attribuutit on kirjoitettu ranskalaisilla viivoilla niiden viereen. T\u00e4st\u00e4 k\u00e4sitemallista voi havainnoida, ett\u00e4 yksitt\u00e4inen teht\u00e4v\u00e4 kuuluu VAIN yhteen tiettyyn teht\u00e4v\u00e4sarjaan, mutta yhdess\u00e4 teht\u00e4v\u00e4sarjassa voi olla monta erillaista teht\u00e4v\u00e4\u00e4. T\u00e4m\u00e4n lis\u00e4ksi k\u00e4sitemallissa on otettu huomioon se mahdollisuus, ett\u00e4 yht\u00e4 teht\u00e4v\u00e4\u00e4 voi tehd\u00e4 monta opiskelijaa, ja teht\u00e4v\u00e4sarjassa voi olla useita palauttajia. T\u00e4m\u00e4 mahdollistaa esim.: Ryhm\u00e4t\u00f6iden palauttamisen. T\u00e4m\u00e4n lis\u00e4ksi yhdess\u00e4 teht\u00e4v\u00e4ss\u00e4 ja teht\u00e4v\u00e4sarjassa on omat max -ja lopulliset pisteet. T\u00e4m\u00e4 mahdollistaa sen, ett\u00e4 opiskelija ja opettaja voi halutessaan tarkistaa yhden tietyn teht\u00e4v\u00e4n pisteet. Viimeinen vivahde on, ett\u00e4 vain teht\u00e4v\u00e4sarjoissa on viimeinen palautusp\u00e4iv\u00e4m\u00e4\u00e4r\u00e4. T\u00e4m\u00e4 tarkoittaa sit\u00e4, ett\u00e4 teht\u00e4v\u00e4t palautetaan sarjoissa eik\u00e4 yksitellen. N\u00e4ist\u00e4 tiedoista voidaan luoda tarkempi versio k\u00e4sitemallista joka sis\u00e4lt\u00e4isi kaikki attribuutit, PK:t, yms. T\u00e4m\u00e4 n\u00e4ytt\u00e4isi teht\u00e4v\u00e4sarjan osalta t\u00e4lt\u00e4: N\u00e4ill\u00e4 tiedoilla voidaan luoda ScoreTronic -Palvelun mukainen tietokanta joka yll\u00e4pit\u00e4\u00e4 opiskelijoiden palauttamat teht\u00e4v\u00e4t, niiden yhteenlasketut pisteet, max pisteet ja muut tarvittavat tiedot. Harjoitus 3 - Teht\u00e4v\u00e4 2 Suunnittele tietokantaratkaisu, jossa tietoa tallennetaan kalastajista ja heid\u00e4n eri kalapaikoissa kalastamista kalasaaleistaan. Tietoa on kyett\u00e4v\u00e4 tallentamaan my\u00f6s saalistetuista kalalajeista. Tietokantaratkaisussa pit\u00e4\u00e4 olla mahdollisuus saada ulos tietoja esim: kalastajista, heid\u00e4n kalasaalism\u00e4\u00e4r\u00e4st\u00e4\u00e4n, kalapaikoista yms. K\u00e4sitteit\u00e4: Kalastaja - Nimi - Kalastajatunnus (ID) - Kalasaalism\u00e4\u00e4r\u00e4 - Kalastuslupa (Kyll\u00e4/ei) Kala - Laji - Paino - Elinalueet Kalastusalue - Sijainti - Kalalajit Kalareissu - Kalastaja(t) - Kalastusalue - Aikav\u00e4li - Saaliit N\u00e4ist\u00e4 tiedoista voin suunnitella k\u00e4sitemallin. T\u00e4ss\u00e4 on huomioitava se, ett\u00e4 kalareissulla on oltava v\u00e4hint\u00e4\u00e4n yksi kalastaja ja kalastusalue mutta n\u00e4it\u00e4 voi olla useampi. T\u00e4m\u00e4 on siksi, ett\u00e4 pidemmill\u00e4 kalastusreissuilla voidaan k\u00e4yd\u00e4 useammassa kalastusalueella. Muut relaatiot ovat aika yksiselitteisi\u00e4. Tietty kalalaji voi el\u00e4\u00e4 useassa kalastusalueessa, kalareissulla voi olla useampi tai ei ollenkaan kalaa saaliina ja kalastajalla voi olla useampi tai ei yht\u00e4\u00e4n kalareissua. Koska kalareissulla on \"Aikav\u00e4li\" ja \"Saaliit\" -attribuutti, n\u00e4ill\u00e4 voidaan mitata esimerkiksi tiettyjen kalastusalueiden saaliit tietylt\u00e4 aikav\u00e4lilt\u00e4 ja kuinka paljon tietyn alueen kalat painavat. T\u00e4m\u00e4n lis\u00e4ksi kaikkien kalastajien kalasaalism\u00e4\u00e4r\u00e4 tietylt\u00e4 aikav\u00e4lilt\u00e4 saadaan n\u00e4ist\u00e4 attribuuteista.","title":"Tietokantojen suunnittelu"},{"location":"Harjoitus3/#tietokantojen-suunnittelu","text":"","title":"Tietokantojen suunnittelu"},{"location":"Harjoitus3/#harjoitus-3-tehtava-1","text":"Suunnittele tietokantaratkaisu t\u00e4m\u00e4n opintojakson harjoitusteht\u00e4vien palauttamiselle tarkoitetulle ScoreTronic-palvelulle. Opiskelijat palauttavat viikottain harjoitusteht\u00e4v\u00e4sarjaan kuuluvat teht\u00e4v\u00e4ns\u00e4. Harjoitusteht\u00e4v\u00e4sarja koostuu useista harjoitusteht\u00e4v\u00e4st\u00e4. Tietty harjoitusteht\u00e4v\u00e4 voi kuulua VAIN yhteen harjoitusteht\u00e4v\u00e4sarjaan. Yksitt\u00e4isell\u00e4 harjoitusteht\u00e4v\u00e4ll\u00e4 on m\u00e4\u00e4ritelty maksimipisteet. Opiskelija tekee jokaiselle teht\u00e4v\u00e4lleen piste-ehdotuksen ja opettaja lopulta p\u00e4\u00e4tt\u00e4\u00e4 pisteet. Opiskelijasta pit\u00e4\u00e4 tiet\u00e4\u00e4 opiskelijatunnus ja nimi. K\u00e4sitteit\u00e4: Opiskelija - Nimi - Opiskelijatunnus Harjoitusteht\u00e4v\u00e4sarja - Harjoitusteht\u00e4v\u00e4(t) - Viimeinen palautusp\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 - Max pisteet - Lopulliset pisteet Harjoitusteht\u00e4v\u00e4 - Mik\u00e4 teht\u00e4v\u00e4 - Max pisteet - Ehdotetut pisteet - Lopulliset pisteet - Palauttajat (Opiskelijat) Huomattavana Harjoitusteht\u00e4v\u00e4 -osiossa on palauttajat . Yksitt\u00e4iseen harjoitusteht\u00e4v\u00e4\u00e4n on mahdollista lis\u00e4t\u00e4 enemm\u00e4n kuin yksi palauttaja. T\u00e4m\u00e4 sallii esim.: Ryhm\u00e4t\u00f6iden palauttamisen. N\u00e4ist\u00e4 tiedoista voin suunnitella k\u00e4sitemallin. K\u00e4yt\u00e4n apunani Draw.io sivustoa. Yksil\u00f6n (Entity) attribuutit on kirjoitettu ranskalaisilla viivoilla niiden viereen. T\u00e4st\u00e4 k\u00e4sitemallista voi havainnoida, ett\u00e4 yksitt\u00e4inen teht\u00e4v\u00e4 kuuluu VAIN yhteen tiettyyn teht\u00e4v\u00e4sarjaan, mutta yhdess\u00e4 teht\u00e4v\u00e4sarjassa voi olla monta erillaista teht\u00e4v\u00e4\u00e4. T\u00e4m\u00e4n lis\u00e4ksi k\u00e4sitemallissa on otettu huomioon se mahdollisuus, ett\u00e4 yht\u00e4 teht\u00e4v\u00e4\u00e4 voi tehd\u00e4 monta opiskelijaa, ja teht\u00e4v\u00e4sarjassa voi olla useita palauttajia. T\u00e4m\u00e4 mahdollistaa esim.: Ryhm\u00e4t\u00f6iden palauttamisen. T\u00e4m\u00e4n lis\u00e4ksi yhdess\u00e4 teht\u00e4v\u00e4ss\u00e4 ja teht\u00e4v\u00e4sarjassa on omat max -ja lopulliset pisteet. T\u00e4m\u00e4 mahdollistaa sen, ett\u00e4 opiskelija ja opettaja voi halutessaan tarkistaa yhden tietyn teht\u00e4v\u00e4n pisteet. Viimeinen vivahde on, ett\u00e4 vain teht\u00e4v\u00e4sarjoissa on viimeinen palautusp\u00e4iv\u00e4m\u00e4\u00e4r\u00e4. T\u00e4m\u00e4 tarkoittaa sit\u00e4, ett\u00e4 teht\u00e4v\u00e4t palautetaan sarjoissa eik\u00e4 yksitellen. N\u00e4ist\u00e4 tiedoista voidaan luoda tarkempi versio k\u00e4sitemallista joka sis\u00e4lt\u00e4isi kaikki attribuutit, PK:t, yms. T\u00e4m\u00e4 n\u00e4ytt\u00e4isi teht\u00e4v\u00e4sarjan osalta t\u00e4lt\u00e4: N\u00e4ill\u00e4 tiedoilla voidaan luoda ScoreTronic -Palvelun mukainen tietokanta joka yll\u00e4pit\u00e4\u00e4 opiskelijoiden palauttamat teht\u00e4v\u00e4t, niiden yhteenlasketut pisteet, max pisteet ja muut tarvittavat tiedot.","title":"Harjoitus 3 - Teht\u00e4v\u00e4 1"},{"location":"Harjoitus3/#harjoitus-3-tehtava-2","text":"Suunnittele tietokantaratkaisu, jossa tietoa tallennetaan kalastajista ja heid\u00e4n eri kalapaikoissa kalastamista kalasaaleistaan. Tietoa on kyett\u00e4v\u00e4 tallentamaan my\u00f6s saalistetuista kalalajeista. Tietokantaratkaisussa pit\u00e4\u00e4 olla mahdollisuus saada ulos tietoja esim: kalastajista, heid\u00e4n kalasaalism\u00e4\u00e4r\u00e4st\u00e4\u00e4n, kalapaikoista yms. K\u00e4sitteit\u00e4: Kalastaja - Nimi - Kalastajatunnus (ID) - Kalasaalism\u00e4\u00e4r\u00e4 - Kalastuslupa (Kyll\u00e4/ei) Kala - Laji - Paino - Elinalueet Kalastusalue - Sijainti - Kalalajit Kalareissu - Kalastaja(t) - Kalastusalue - Aikav\u00e4li - Saaliit N\u00e4ist\u00e4 tiedoista voin suunnitella k\u00e4sitemallin. T\u00e4ss\u00e4 on huomioitava se, ett\u00e4 kalareissulla on oltava v\u00e4hint\u00e4\u00e4n yksi kalastaja ja kalastusalue mutta n\u00e4it\u00e4 voi olla useampi. T\u00e4m\u00e4 on siksi, ett\u00e4 pidemmill\u00e4 kalastusreissuilla voidaan k\u00e4yd\u00e4 useammassa kalastusalueella. Muut relaatiot ovat aika yksiselitteisi\u00e4. Tietty kalalaji voi el\u00e4\u00e4 useassa kalastusalueessa, kalareissulla voi olla useampi tai ei ollenkaan kalaa saaliina ja kalastajalla voi olla useampi tai ei yht\u00e4\u00e4n kalareissua. Koska kalareissulla on \"Aikav\u00e4li\" ja \"Saaliit\" -attribuutti, n\u00e4ill\u00e4 voidaan mitata esimerkiksi tiettyjen kalastusalueiden saaliit tietylt\u00e4 aikav\u00e4lilt\u00e4 ja kuinka paljon tietyn alueen kalat painavat. T\u00e4m\u00e4n lis\u00e4ksi kaikkien kalastajien kalasaalism\u00e4\u00e4r\u00e4 tietylt\u00e4 aikav\u00e4lilt\u00e4 saadaan n\u00e4ist\u00e4 attribuuteista.","title":"Harjoitus 3 - Teht\u00e4v\u00e4 2"},{"location":"Harjoitus4/","text":"Normalisointi Harjoitus 4 - Teht\u00e4v\u00e4 1 Teht\u00e4v\u00e4nanto Oheinen kuva esitt\u00e4\u00e4 alustavaa luonnosta k\u00e4sitemalliksi tietokantaratkaisulle, jolla hallitaan kirpputorilla myyt\u00e4vi\u00e4 kohteita, myyji\u00e4, p\u00f6yd\u00e4n varaajia, ostajia, p\u00f6yd\u00e4n numeroita ja mahdollisia varauksia. Myyt\u00e4vist\u00e4 kohteista voidaan tallentaa mm. nimi, kuva, hinta ja kategoria (esim. vaate, videopeli, tietokoneen osa) Mallissa n\u00e4kyv\u00e4t k\u00e4sitteiden nimet, k\u00e4sitteiden v\u00e4liset suhteet ja ominaisuudet ovat vain luonnoksia, mutta antavat selv\u00e4n suunnan sille, mit\u00e4 asioita tietokannasta pit\u00e4isi l\u00f6yty\u00e4 Teht\u00e4v\u00e4si on jalostaa Kirpputori-tietokannan yll\u00e4 esitetyst\u00e4 k\u00e4sitemallin luonnoksesta EER-kaavio MySQL WorkBench -ohjelmalla. EER-kaaviosi tulee t\u00e4ydent\u00e4\u00e4 ja tarkentaa yll\u00e4 kuvattua toimeksiantoa ja k\u00e4sitemallin luonnosta seuraavasti: + Kaaviostasi tulee l\u00f6yty\u00e4 v\u00e4hint\u00e4\u00e4n 6 eri taulua + Tarkenna ja tarvittaessa lis\u00e4\u00e4 tauluihin liittyvi\u00e4 tietoja (ominaisuuksia) edelleen siten, ett\u00e4 ominaisuuksia on yhteen laskien v\u00e4hint\u00e4\u00e4n 30kpl. + Voit nimet\u00e4 taulut ja ominaisuudet halutessasi uudelleen (esim. englanniksikin) + EER-kaaviosi tulee kuvata my\u00f6s kaikki tuotteen ja asiakkaan v\u00e4liset yhteydet (myy/ostaa/varaa). N\u00e4in 6 taulun EER-kaaviosta tulisi l\u00f6yty\u00e4 lopulta v\u00e4hint\u00e4\u00e4n 7; ehk\u00e4 8 eri yhteytt\u00e4. + Perustele keskeiset k\u00e4ytt\u00e4m\u00e4si ratkaisut, voit liitt\u00e4\u00e4 perustelut ytimekk\u00e4in\u00e4 lauseina tekstin\u00e4 kaavioon tai muulla valitsemallasi tavalla + Tarkenna ja tarvittaessa muuta erityisesti k\u00e4sitemalliluonnoksessa n\u00e4kyvi\u00e4 alustavia yhteyksien lukum\u00e4\u00e4r\u00e4suhteita (yksi-yhteen, yksi-moneen, moni-moneen) ja yhteyksien pakollisuuksia (esim. tuote on sijaittava aina tasan yhdell\u00e4 p\u00f6yd\u00e4ll\u00e4) + Voit toteuttaa teht\u00e4v\u00e4nannosta halutessasi vain ne osat, jotka osaat tai saat aikaan mielekk\u00e4\u00e4ll\u00e4 ty\u00f6m\u00e4\u00e4r\u00e4ll\u00e4 ja merkit\u00e4 teht\u00e4v\u00e4st\u00e4 sitten osapisteit\u00e4. Kaavio tulee esitt\u00e4\u00e4 graafisessa muodossa. Ota esim. PNG-kuvakaappaus EER-mallistasi siten, ett\u00e4 ratkaisusi n\u00e4kyy siit\u00e4 selv\u00e4sti eli taulut nimineen, niiden ominaisuudet tietotyyppeineen, taulujen yhteydet ja perustelut. Kuvakaappaus voi olla osa muuta dokumentaatiotasi. T\u00e4ss\u00e4 teht\u00e4v\u00e4ss\u00e4 tietokantaa ei tarvitse fyysisesti luoda (Forward Engineer). Riitt\u00e4\u00e4 ett\u00e4 esit\u00e4t EER-mallin perusteluineen. Aloitan luomalla uuden EER-kaavion MySQL Workbenchill\u00e4. Luon uudet k\u00e4sitteet ja annan niille omat ominaisuudet kuten teht\u00e4v\u00e4nannossa on kerrottu. Lopulta minun EER-kaavio n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: SELITTEET: Tuotteen tilaukselle on tehty oma yksil\u00f6. P\u00f6yd\u00e4n varaukselle on tehty oma yksil\u00f6. T\u00e4st\u00e4 voi n\u00e4hd\u00e4 kuka on varannut mink\u00e4 p\u00f6yd\u00e4n ja milt\u00e4 aikav\u00e4lilt\u00e4. Relaatiot: Asiakas - Voi olla monta tilausta tai ei yht\u00e4\u00e4n. - Voi olla monta varausta/myynti\u00e4 tai ei yht\u00e4\u00e4n. - Voi olla monta p\u00f6yd\u00e4n varausta tai ei yht\u00e4\u00e4n. Tuote - Voi olla vain yhdess\u00e4 tai ei miss\u00e4\u00e4n p\u00f6yd\u00e4ss\u00e4. - On oltava vain yhdess\u00e4 tuoteryhm\u00e4ss\u00e4. - On oltava vain yksi myyj\u00e4 - Voi olla monessa tilauksessa tai ei miss\u00e4\u00e4n. - Voi olla vain yhdess\u00e4 varauksessa tai ei miss\u00e4\u00e4n. P\u00f6yt\u00e4 - Voi olla monesti varattuna tai ei ollenkaan. (Erit aikav\u00e4lit) - Voi olla monta tuotetta tai ei ollenkaan. T\u00e4ss\u00e4 EER-kaaviossa on 6 taulua ja 30 eri attribuuttia. Kaikki halutut relaatiot on mallennettu. Harjoitus 4 - Teht\u00e4v\u00e4 2 Teht\u00e4v\u00e4nanto Toteuta edell\u00e4 m\u00e4\u00e4rittelem\u00e4si tietokanta Workbenchill\u00e4 haluamallesi tietokantapalvelimelle (esim. XAMPP, Mariadb.labranet.jamk.fi) Forward Engineer -toiminnolla. Osoita tekstein ja parilla/muutamalla kuvaruutukaappauksella, ett\u00e4 onnistuit tietokannan luomaan. Lis\u00e4ksi esit\u00e4 Workbenchin generoimat SQL-lauseet tietokannan luomiseksi. Tietokantaan ei tarvitse lis\u00e4t\u00e4 dataa. Voit saada pisteit\u00e4 teht\u00e4v\u00e4st\u00e4 vaikka et onnistu luomaan tietokantaa mallistasi. T\u00e4ll\u00f6in esit\u00e4 virheet ja mahdolliset pohdintasi/syyt virheille. Otan teht\u00e4v\u00e4 1:sen EER-kaavion ja toteutan sen Forward Engineer -toiminnolla. Saan t\u00e4st\u00e4 seuraavan SQL skriptin: -- MySQL Workbench Forward Engineering SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'; -- ----------------------------------------------------- -- Schema kirpputori_db -- ----------------------------------------------------- -- ----------------------------------------------------- -- Schema kirpputori_db -- ----------------------------------------------------- CREATE SCHEMA IF NOT EXISTS `kirpputori_db` ; USE `kirpputori_db` ; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Asiakas` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Asiakas` ( `Asiakasnro` INT NOT NULL, `Etunimi` VARCHAR(45) NOT NULL, `Sukunimi` VARCHAR(45) NOT NULL, `PremiumAsiakas` INT NOT NULL, `Syntymaaika` DATE NULL, `Lahiosoite` VARCHAR(45) NULL, `Postinro` INT NOT NULL, PRIMARY KEY (`Asiakasnro`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Poyta` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Poyta` ( `Poytanro` INT NOT NULL, `Koko` INT NOT NULL, `Sijainti` VARCHAR(45) NOT NULL, `Tuontivuokra` INT NOT NULL, PRIMARY KEY (`Poytanro`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Tuoteryhma` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Tuoteryhma` ( `Tuoteryhmanro` INT NOT NULL, `Nimi` VARCHAR(45) NOT NULL, `Kategoria` VARCHAR(45) NOT NULL, `Tuoteryhmanimi` VARCHAR(45) NULL, PRIMARY KEY (`Tuoteryhmanro`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Poyta_varaus` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Poyta_varaus` ( `Poyta_Poytanro` INT NOT NULL, `Asiakas_Asiakasnro` INT NOT NULL, `Varausaika` DATE NOT NULL, PRIMARY KEY (`Poyta_Poytanro`, `Asiakas_Asiakasnro`), INDEX `fk_Poyta_has_Asiakas_Asiakas1_idx` (`Asiakas_Asiakasnro` ASC), INDEX `fk_Poyta_has_Asiakas_Poyta1_idx` (`Poyta_Poytanro` ASC), CONSTRAINT `fk_Poyta_has_Asiakas_Poyta1` FOREIGN KEY (`Poyta_Poytanro`) REFERENCES `kirpputori_db`.`Poyta` (`Poytanro`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Poyta_has_Asiakas_Asiakas1` FOREIGN KEY (`Asiakas_Asiakasnro`) REFERENCES `kirpputori_db`.`Asiakas` (`Asiakasnro`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Tuote` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Tuote` ( `Tuotenro` INT NOT NULL, `Nimi` VARCHAR(45) NOT NULL, `Hinta` FLOAT NOT NULL, `Tuoteryhmanro` INT NULL, `MyyntiID` INT NULL, `Poytanro` INT NULL, `VarausID` INT NULL, PRIMARY KEY (`Tuotenro`), INDEX `fk_Tuote_Tuoteryhma1_idx` (`Tuoteryhmanro` ASC), INDEX `fk_Tuote_Asiakas1_idx` (`MyyntiID` ASC), INDEX `fk_Tuote_Poyta1_idx` (`Poytanro` ASC), INDEX `fk_Tuote_Asiakas2_idx` (`VarausID` ASC), CONSTRAINT `fk_Tuote_Tuoteryhma1` FOREIGN KEY (`Tuoteryhmanro`) REFERENCES `kirpputori_db`.`Tuoteryhma` (`Tuoteryhmanro`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Tuote_Asiakas1` FOREIGN KEY (`MyyntiID`) REFERENCES `kirpputori_db`.`Asiakas` (`Asiakasnro`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Tuote_Poyta1` FOREIGN KEY (`Poytanro`) REFERENCES `kirpputori_db`.`Poyta` (`Poytanro`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Tuote_Asiakas2` FOREIGN KEY (`VarausID`) REFERENCES `kirpputori_db`.`Asiakas` (`Asiakasnro`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Tilaus` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Tilaus` ( `Tuote_Tuotenro` INT NOT NULL, `Asiakas_Asiakasnro` INT NOT NULL, `Lahiosoite` VARCHAR(45) NULL, `Postinro` VARCHAR(45) NULL, PRIMARY KEY (`Tuote_Tuotenro`, `Asiakas_Asiakasnro`), INDEX `fk_TuoteREAL_has_Asiakas_Asiakas1_idx` (`Asiakas_Asiakasnro` ASC), INDEX `fk_TuoteREAL_has_Asiakas_TuoteREAL1_idx` (`Tuote_Tuotenro` ASC), CONSTRAINT `fk_TuoteREAL_has_Asiakas_TuoteREAL1` FOREIGN KEY (`Tuote_Tuotenro`) REFERENCES `kirpputori_db`.`Tuote` (`Tuotenro`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_TuoteREAL_has_Asiakas_Asiakas1` FOREIGN KEY (`Asiakas_Asiakasnro`) REFERENCES `kirpputori_db`.`Asiakas` (`Asiakasnro`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; SET SQL_MODE=@OLD_SQL_MODE; SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS; T\u00e4m\u00e4n SQL skriptin j\u00e4lkeen minulla on uusi tietokanta!","title":"Normalisointi"},{"location":"Harjoitus4/#normalisointi","text":"","title":"Normalisointi"},{"location":"Harjoitus4/#harjoitus-4-tehtava-1","text":"Teht\u00e4v\u00e4nanto Oheinen kuva esitt\u00e4\u00e4 alustavaa luonnosta k\u00e4sitemalliksi tietokantaratkaisulle, jolla hallitaan kirpputorilla myyt\u00e4vi\u00e4 kohteita, myyji\u00e4, p\u00f6yd\u00e4n varaajia, ostajia, p\u00f6yd\u00e4n numeroita ja mahdollisia varauksia. Myyt\u00e4vist\u00e4 kohteista voidaan tallentaa mm. nimi, kuva, hinta ja kategoria (esim. vaate, videopeli, tietokoneen osa) Mallissa n\u00e4kyv\u00e4t k\u00e4sitteiden nimet, k\u00e4sitteiden v\u00e4liset suhteet ja ominaisuudet ovat vain luonnoksia, mutta antavat selv\u00e4n suunnan sille, mit\u00e4 asioita tietokannasta pit\u00e4isi l\u00f6yty\u00e4 Teht\u00e4v\u00e4si on jalostaa Kirpputori-tietokannan yll\u00e4 esitetyst\u00e4 k\u00e4sitemallin luonnoksesta EER-kaavio MySQL WorkBench -ohjelmalla. EER-kaaviosi tulee t\u00e4ydent\u00e4\u00e4 ja tarkentaa yll\u00e4 kuvattua toimeksiantoa ja k\u00e4sitemallin luonnosta seuraavasti: + Kaaviostasi tulee l\u00f6yty\u00e4 v\u00e4hint\u00e4\u00e4n 6 eri taulua + Tarkenna ja tarvittaessa lis\u00e4\u00e4 tauluihin liittyvi\u00e4 tietoja (ominaisuuksia) edelleen siten, ett\u00e4 ominaisuuksia on yhteen laskien v\u00e4hint\u00e4\u00e4n 30kpl. + Voit nimet\u00e4 taulut ja ominaisuudet halutessasi uudelleen (esim. englanniksikin) + EER-kaaviosi tulee kuvata my\u00f6s kaikki tuotteen ja asiakkaan v\u00e4liset yhteydet (myy/ostaa/varaa). N\u00e4in 6 taulun EER-kaaviosta tulisi l\u00f6yty\u00e4 lopulta v\u00e4hint\u00e4\u00e4n 7; ehk\u00e4 8 eri yhteytt\u00e4. + Perustele keskeiset k\u00e4ytt\u00e4m\u00e4si ratkaisut, voit liitt\u00e4\u00e4 perustelut ytimekk\u00e4in\u00e4 lauseina tekstin\u00e4 kaavioon tai muulla valitsemallasi tavalla + Tarkenna ja tarvittaessa muuta erityisesti k\u00e4sitemalliluonnoksessa n\u00e4kyvi\u00e4 alustavia yhteyksien lukum\u00e4\u00e4r\u00e4suhteita (yksi-yhteen, yksi-moneen, moni-moneen) ja yhteyksien pakollisuuksia (esim. tuote on sijaittava aina tasan yhdell\u00e4 p\u00f6yd\u00e4ll\u00e4) + Voit toteuttaa teht\u00e4v\u00e4nannosta halutessasi vain ne osat, jotka osaat tai saat aikaan mielekk\u00e4\u00e4ll\u00e4 ty\u00f6m\u00e4\u00e4r\u00e4ll\u00e4 ja merkit\u00e4 teht\u00e4v\u00e4st\u00e4 sitten osapisteit\u00e4. Kaavio tulee esitt\u00e4\u00e4 graafisessa muodossa. Ota esim. PNG-kuvakaappaus EER-mallistasi siten, ett\u00e4 ratkaisusi n\u00e4kyy siit\u00e4 selv\u00e4sti eli taulut nimineen, niiden ominaisuudet tietotyyppeineen, taulujen yhteydet ja perustelut. Kuvakaappaus voi olla osa muuta dokumentaatiotasi. T\u00e4ss\u00e4 teht\u00e4v\u00e4ss\u00e4 tietokantaa ei tarvitse fyysisesti luoda (Forward Engineer). Riitt\u00e4\u00e4 ett\u00e4 esit\u00e4t EER-mallin perusteluineen. Aloitan luomalla uuden EER-kaavion MySQL Workbenchill\u00e4. Luon uudet k\u00e4sitteet ja annan niille omat ominaisuudet kuten teht\u00e4v\u00e4nannossa on kerrottu. Lopulta minun EER-kaavio n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: SELITTEET: Tuotteen tilaukselle on tehty oma yksil\u00f6. P\u00f6yd\u00e4n varaukselle on tehty oma yksil\u00f6. T\u00e4st\u00e4 voi n\u00e4hd\u00e4 kuka on varannut mink\u00e4 p\u00f6yd\u00e4n ja milt\u00e4 aikav\u00e4lilt\u00e4. Relaatiot: Asiakas - Voi olla monta tilausta tai ei yht\u00e4\u00e4n. - Voi olla monta varausta/myynti\u00e4 tai ei yht\u00e4\u00e4n. - Voi olla monta p\u00f6yd\u00e4n varausta tai ei yht\u00e4\u00e4n. Tuote - Voi olla vain yhdess\u00e4 tai ei miss\u00e4\u00e4n p\u00f6yd\u00e4ss\u00e4. - On oltava vain yhdess\u00e4 tuoteryhm\u00e4ss\u00e4. - On oltava vain yksi myyj\u00e4 - Voi olla monessa tilauksessa tai ei miss\u00e4\u00e4n. - Voi olla vain yhdess\u00e4 varauksessa tai ei miss\u00e4\u00e4n. P\u00f6yt\u00e4 - Voi olla monesti varattuna tai ei ollenkaan. (Erit aikav\u00e4lit) - Voi olla monta tuotetta tai ei ollenkaan. T\u00e4ss\u00e4 EER-kaaviossa on 6 taulua ja 30 eri attribuuttia. Kaikki halutut relaatiot on mallennettu.","title":"Harjoitus 4 - Teht\u00e4v\u00e4 1"},{"location":"Harjoitus4/#harjoitus-4-tehtava-2","text":"Teht\u00e4v\u00e4nanto Toteuta edell\u00e4 m\u00e4\u00e4rittelem\u00e4si tietokanta Workbenchill\u00e4 haluamallesi tietokantapalvelimelle (esim. XAMPP, Mariadb.labranet.jamk.fi) Forward Engineer -toiminnolla. Osoita tekstein ja parilla/muutamalla kuvaruutukaappauksella, ett\u00e4 onnistuit tietokannan luomaan. Lis\u00e4ksi esit\u00e4 Workbenchin generoimat SQL-lauseet tietokannan luomiseksi. Tietokantaan ei tarvitse lis\u00e4t\u00e4 dataa. Voit saada pisteit\u00e4 teht\u00e4v\u00e4st\u00e4 vaikka et onnistu luomaan tietokantaa mallistasi. T\u00e4ll\u00f6in esit\u00e4 virheet ja mahdolliset pohdintasi/syyt virheille. Otan teht\u00e4v\u00e4 1:sen EER-kaavion ja toteutan sen Forward Engineer -toiminnolla. Saan t\u00e4st\u00e4 seuraavan SQL skriptin: -- MySQL Workbench Forward Engineering SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'; -- ----------------------------------------------------- -- Schema kirpputori_db -- ----------------------------------------------------- -- ----------------------------------------------------- -- Schema kirpputori_db -- ----------------------------------------------------- CREATE SCHEMA IF NOT EXISTS `kirpputori_db` ; USE `kirpputori_db` ; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Asiakas` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Asiakas` ( `Asiakasnro` INT NOT NULL, `Etunimi` VARCHAR(45) NOT NULL, `Sukunimi` VARCHAR(45) NOT NULL, `PremiumAsiakas` INT NOT NULL, `Syntymaaika` DATE NULL, `Lahiosoite` VARCHAR(45) NULL, `Postinro` INT NOT NULL, PRIMARY KEY (`Asiakasnro`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Poyta` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Poyta` ( `Poytanro` INT NOT NULL, `Koko` INT NOT NULL, `Sijainti` VARCHAR(45) NOT NULL, `Tuontivuokra` INT NOT NULL, PRIMARY KEY (`Poytanro`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Tuoteryhma` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Tuoteryhma` ( `Tuoteryhmanro` INT NOT NULL, `Nimi` VARCHAR(45) NOT NULL, `Kategoria` VARCHAR(45) NOT NULL, `Tuoteryhmanimi` VARCHAR(45) NULL, PRIMARY KEY (`Tuoteryhmanro`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Poyta_varaus` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Poyta_varaus` ( `Poyta_Poytanro` INT NOT NULL, `Asiakas_Asiakasnro` INT NOT NULL, `Varausaika` DATE NOT NULL, PRIMARY KEY (`Poyta_Poytanro`, `Asiakas_Asiakasnro`), INDEX `fk_Poyta_has_Asiakas_Asiakas1_idx` (`Asiakas_Asiakasnro` ASC), INDEX `fk_Poyta_has_Asiakas_Poyta1_idx` (`Poyta_Poytanro` ASC), CONSTRAINT `fk_Poyta_has_Asiakas_Poyta1` FOREIGN KEY (`Poyta_Poytanro`) REFERENCES `kirpputori_db`.`Poyta` (`Poytanro`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Poyta_has_Asiakas_Asiakas1` FOREIGN KEY (`Asiakas_Asiakasnro`) REFERENCES `kirpputori_db`.`Asiakas` (`Asiakasnro`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Tuote` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Tuote` ( `Tuotenro` INT NOT NULL, `Nimi` VARCHAR(45) NOT NULL, `Hinta` FLOAT NOT NULL, `Tuoteryhmanro` INT NULL, `MyyntiID` INT NULL, `Poytanro` INT NULL, `VarausID` INT NULL, PRIMARY KEY (`Tuotenro`), INDEX `fk_Tuote_Tuoteryhma1_idx` (`Tuoteryhmanro` ASC), INDEX `fk_Tuote_Asiakas1_idx` (`MyyntiID` ASC), INDEX `fk_Tuote_Poyta1_idx` (`Poytanro` ASC), INDEX `fk_Tuote_Asiakas2_idx` (`VarausID` ASC), CONSTRAINT `fk_Tuote_Tuoteryhma1` FOREIGN KEY (`Tuoteryhmanro`) REFERENCES `kirpputori_db`.`Tuoteryhma` (`Tuoteryhmanro`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Tuote_Asiakas1` FOREIGN KEY (`MyyntiID`) REFERENCES `kirpputori_db`.`Asiakas` (`Asiakasnro`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Tuote_Poyta1` FOREIGN KEY (`Poytanro`) REFERENCES `kirpputori_db`.`Poyta` (`Poytanro`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Tuote_Asiakas2` FOREIGN KEY (`VarausID`) REFERENCES `kirpputori_db`.`Asiakas` (`Asiakasnro`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `kirpputori_db`.`Tilaus` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `kirpputori_db`.`Tilaus` ( `Tuote_Tuotenro` INT NOT NULL, `Asiakas_Asiakasnro` INT NOT NULL, `Lahiosoite` VARCHAR(45) NULL, `Postinro` VARCHAR(45) NULL, PRIMARY KEY (`Tuote_Tuotenro`, `Asiakas_Asiakasnro`), INDEX `fk_TuoteREAL_has_Asiakas_Asiakas1_idx` (`Asiakas_Asiakasnro` ASC), INDEX `fk_TuoteREAL_has_Asiakas_TuoteREAL1_idx` (`Tuote_Tuotenro` ASC), CONSTRAINT `fk_TuoteREAL_has_Asiakas_TuoteREAL1` FOREIGN KEY (`Tuote_Tuotenro`) REFERENCES `kirpputori_db`.`Tuote` (`Tuotenro`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_TuoteREAL_has_Asiakas_Asiakas1` FOREIGN KEY (`Asiakas_Asiakasnro`) REFERENCES `kirpputori_db`.`Asiakas` (`Asiakasnro`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; SET SQL_MODE=@OLD_SQL_MODE; SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS; T\u00e4m\u00e4n SQL skriptin j\u00e4lkeen minulla on uusi tietokanta!","title":"Harjoitus 4 - Teht\u00e4v\u00e4 2"},{"location":"Harjoitus5/","text":"SQL-funktiot ja -liitokset Harjoitus 5 - Teht\u00e4v\u00e4 1 A. Hae students-taulusta suurin ja pienin annettu veroprosentti. Anna sarakeotsikoiksi maksimi ja minimi. T\u00e4m\u00e4n voi suorittaa komennolla: B. Montako opintosuoritusta on merkitty studentgrades-tauluun? T\u00e4m\u00e4n voi suorittaa komennolla: C. Laske on opiskelijoiden veroprosenttien keskiarvo. Anna sarakeotsikoiksi Keskiarvo. T\u00e4m\u00e4n voi suorittaa komennolla: D. Paljonko on kaikkien opiskelijoiden tulot yhteens\u00e4, Anna tulosrivin otsikoksi Tulot yhteens\u00e4 T\u00e4m\u00e4n voi suorittaa komennolla: E. Montako erilaista silmien v\u00e4ri\u00e4 opiskelijoilla on henkilo-taulussa? Anna tulosrivin otsikoksi Lukum\u00e4\u00e4r\u00e4 T\u00e4m\u00e4n voi suorittaa komennolla: Harjoitus 5 - Teht\u00e4v\u00e4 2 A. Hae students-taulusta kaikista sukunimist\u00e4 ensimm\u00e4inen merkki. T\u00e4m\u00e4n voi suorittaa komennolla: B. Hae students-taulusta suku- ja etunimet yhdistettyn\u00e4 seuraavan mallin mukaisesti: Guru, Ken. Anna sarakeotsikoksi Kokonimi. T\u00e4m\u00e4n voi suorittaa komennolla: C. students-taulun opiskelijoille luodaan k\u00e4ytt\u00e4j\u00e4tunnus, johon otetaan sukunimest\u00e4 4 ensimm\u00e4ist\u00e4 merkki\u00e4 ja etunimest\u00e4 4 ensimm\u00e4ist\u00e4 merkki\u00e4. Kaikki merkit tulee olla pienill\u00e4 merkeill\u00e4 (gemena, pienaakkoset). Jos suku- tai etunimess\u00e4 ei ole nelj\u00e4\u00e4 merkki\u00e4, niin merkkien lukum\u00e4\u00e4r\u00e4 taydennet\u00e4\u00e4n nelj\u00e4\u00e4n lis\u00e4\u00e4m\u00e4ll\u00e4 osamerkkijonon loppuun merkkej\u00e4 x siten ett\u00e4 4 merkin vaatimus t\u00e4ytyy. Esimerkit: Saurus Tino -> saurtino, Ana Ruut -> anaxruut. Tee SQL-lause, joka tulostaa kaikille yo. vaatimusten mukaiset k\u00e4ytt\u00e4j\u00e4tunnukset. T\u00e4m\u00e4n voi suorittaa komennolla: D. Hae ne opiskelijat joiden syntym\u00e4p\u00e4iv\u00e4 on 11.11.2004, 11.11.2005 tai 11.11.2006 T\u00e4m\u00e4n voi suorittaa komennolla: Harjoitus 5 - Teht\u00e4v\u00e4 3 A. Laske opiskelijoiden tulojen keskiarvo kotikunnittain. Anna sarakeotsikoiksi Kotikunnan ID ja KAtulot. N\u00e4m\u00e4 tiedot voit hakea pelk\u00e4st\u00e4\u00e4n students-taulusta. Kotikunnattomat voi olla omana ryhm\u00e4n\u00e4. Lajittele tulokset suurimmasta pienimp\u00e4\u00e4n tulokeskiarvojen mukaan. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B. Sukunimen X-Factor-tekij\u00e4n\u00e4 tunnetun toisen merkin on huomattu ennustavan opiskelijan opintomenestyst\u00e4. Laske nyt opiskelijoiden keskiarvotulot ryhmiteltyn\u00e4 t\u00e4m\u00e4n X-Factor-tekij\u00e4n mukaan. Tuloksessa tulee n\u00e4ky\u00e4 my\u00f6s opiskelijoiden lukum\u00e4\u00e4r\u00e4 kutakin X-Factor-tekij\u00e4\u00e4 kohti. Lajittele keskiarvotulot laskevaan j\u00e4rjestykseen. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: C. Laske opiskelijoiden verot tulojen ja veroprosentin avulla. Tulossarakkeet: sukunimi, etunimi, tulot, veroprosentti ja vero. Lajittele lasketun veron mukaan laskevaan j\u00e4rjestykseen. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: D. Mik\u00e4 on isoimman ja pienimm\u00e4n kaupungin asukaslukujen erotus? Montako prosenttia isoin asukasluku on suurempi kuin pienin asukasluku? K\u00e4yt\u00e4 SQL-lausetta, jossa yhdelle riville tulostuu isoin ja pienin asukaslukum\u00e4\u00e4r\u00e4, n\u00e4iden erotus lukuna ja ero prosentteina. Kaupunkien nimi\u00e4 ei tarvitse tulostaa. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: E. Hae nimet ja asukaslukuvut kaikista kaupungeista, joiden asukasluku olisi 10 prosentin lis\u00e4yksen j\u00e4lkeen yli 200 000. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: Harjoitus 5 - Teht\u00e4v\u00e4 4 A. Hae opiskelijan 2003 (studentID) suoritetut opintojaksot arvosanoineen. Opiskelijan nime\u00e4 ei tarvitse tulostaa. Tarvitaan siis vain kaksi taulua. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B. Hae 8 viimeisint\u00e4 kurssisuoritusta lajiteltuna uusimmasta vanhimpaan suoritukseen. Riveill\u00e4 tulee n\u00e4ky\u00e4 kurssin nimi, suoritusp\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 suomalaisessa muodossa esim. 17.02.2021, opiskelijan tunnus studentID ja opintojakson arvosana. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: C. Hae opiskelijoittain heid\u00e4n kaikkien opintojaksosuoritusten keskiarvo. Tulosta opiskelijoiden sukunimi, etunimi ja laskettu keskiarvo. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: Harjoitus 5 - Teht\u00e4v\u00e4 5 A. Hae silmien v\u00e4reitt\u00e4in keskim\u00e4\u00e4r\u00e4iset asukasluvut. Ota mukaan omaksi ryhm\u00e4ksi my\u00f6s ne joiden silmien v\u00e4ri\u00e4 ei tiedet\u00e4. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B. Hae kotikaupungeittain ja opintojaksottain kaikkien opintojaksosuoritusten keskiarvo. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: C. Hae opiskelijat tuloineen siten, ett\u00e4 ylim\u00e4\u00e4r\u00e4iseen sarakkeeseen tulee merkint\u00e4 pienituloinen niille, joiden tulot ovat 15000 tai alle ja muille t\u00e4h\u00e4n sarakkeeseen tulee merkint\u00e4 isotuloinen . Lajittele suurituloisimmista pienituloisimpaan. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla:","title":"SQL-funktiot ja -liitokset"},{"location":"Harjoitus5/#sql-funktiot-ja-liitokset","text":"","title":"SQL-funktiot ja -liitokset"},{"location":"Harjoitus5/#harjoitus-5-tehtava-1","text":"A. Hae students-taulusta suurin ja pienin annettu veroprosentti. Anna sarakeotsikoiksi maksimi ja minimi. T\u00e4m\u00e4n voi suorittaa komennolla: B. Montako opintosuoritusta on merkitty studentgrades-tauluun? T\u00e4m\u00e4n voi suorittaa komennolla: C. Laske on opiskelijoiden veroprosenttien keskiarvo. Anna sarakeotsikoiksi Keskiarvo. T\u00e4m\u00e4n voi suorittaa komennolla: D. Paljonko on kaikkien opiskelijoiden tulot yhteens\u00e4, Anna tulosrivin otsikoksi Tulot yhteens\u00e4 T\u00e4m\u00e4n voi suorittaa komennolla: E. Montako erilaista silmien v\u00e4ri\u00e4 opiskelijoilla on henkilo-taulussa? Anna tulosrivin otsikoksi Lukum\u00e4\u00e4r\u00e4 T\u00e4m\u00e4n voi suorittaa komennolla:","title":"Harjoitus 5 - Teht\u00e4v\u00e4 1"},{"location":"Harjoitus5/#harjoitus-5-tehtava-2","text":"A. Hae students-taulusta kaikista sukunimist\u00e4 ensimm\u00e4inen merkki. T\u00e4m\u00e4n voi suorittaa komennolla: B. Hae students-taulusta suku- ja etunimet yhdistettyn\u00e4 seuraavan mallin mukaisesti: Guru, Ken. Anna sarakeotsikoksi Kokonimi. T\u00e4m\u00e4n voi suorittaa komennolla: C. students-taulun opiskelijoille luodaan k\u00e4ytt\u00e4j\u00e4tunnus, johon otetaan sukunimest\u00e4 4 ensimm\u00e4ist\u00e4 merkki\u00e4 ja etunimest\u00e4 4 ensimm\u00e4ist\u00e4 merkki\u00e4. Kaikki merkit tulee olla pienill\u00e4 merkeill\u00e4 (gemena, pienaakkoset). Jos suku- tai etunimess\u00e4 ei ole nelj\u00e4\u00e4 merkki\u00e4, niin merkkien lukum\u00e4\u00e4r\u00e4 taydennet\u00e4\u00e4n nelj\u00e4\u00e4n lis\u00e4\u00e4m\u00e4ll\u00e4 osamerkkijonon loppuun merkkej\u00e4 x siten ett\u00e4 4 merkin vaatimus t\u00e4ytyy. Esimerkit: Saurus Tino -> saurtino, Ana Ruut -> anaxruut. Tee SQL-lause, joka tulostaa kaikille yo. vaatimusten mukaiset k\u00e4ytt\u00e4j\u00e4tunnukset. T\u00e4m\u00e4n voi suorittaa komennolla: D. Hae ne opiskelijat joiden syntym\u00e4p\u00e4iv\u00e4 on 11.11.2004, 11.11.2005 tai 11.11.2006 T\u00e4m\u00e4n voi suorittaa komennolla:","title":"Harjoitus 5 - Teht\u00e4v\u00e4 2"},{"location":"Harjoitus5/#harjoitus-5-tehtava-3","text":"A. Laske opiskelijoiden tulojen keskiarvo kotikunnittain. Anna sarakeotsikoiksi Kotikunnan ID ja KAtulot. N\u00e4m\u00e4 tiedot voit hakea pelk\u00e4st\u00e4\u00e4n students-taulusta. Kotikunnattomat voi olla omana ryhm\u00e4n\u00e4. Lajittele tulokset suurimmasta pienimp\u00e4\u00e4n tulokeskiarvojen mukaan. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B. Sukunimen X-Factor-tekij\u00e4n\u00e4 tunnetun toisen merkin on huomattu ennustavan opiskelijan opintomenestyst\u00e4. Laske nyt opiskelijoiden keskiarvotulot ryhmiteltyn\u00e4 t\u00e4m\u00e4n X-Factor-tekij\u00e4n mukaan. Tuloksessa tulee n\u00e4ky\u00e4 my\u00f6s opiskelijoiden lukum\u00e4\u00e4r\u00e4 kutakin X-Factor-tekij\u00e4\u00e4 kohti. Lajittele keskiarvotulot laskevaan j\u00e4rjestykseen. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: C. Laske opiskelijoiden verot tulojen ja veroprosentin avulla. Tulossarakkeet: sukunimi, etunimi, tulot, veroprosentti ja vero. Lajittele lasketun veron mukaan laskevaan j\u00e4rjestykseen. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: D. Mik\u00e4 on isoimman ja pienimm\u00e4n kaupungin asukaslukujen erotus? Montako prosenttia isoin asukasluku on suurempi kuin pienin asukasluku? K\u00e4yt\u00e4 SQL-lausetta, jossa yhdelle riville tulostuu isoin ja pienin asukaslukum\u00e4\u00e4r\u00e4, n\u00e4iden erotus lukuna ja ero prosentteina. Kaupunkien nimi\u00e4 ei tarvitse tulostaa. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: E. Hae nimet ja asukaslukuvut kaikista kaupungeista, joiden asukasluku olisi 10 prosentin lis\u00e4yksen j\u00e4lkeen yli 200 000. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla:","title":"Harjoitus 5 - Teht\u00e4v\u00e4 3"},{"location":"Harjoitus5/#harjoitus-5-tehtava-4","text":"A. Hae opiskelijan 2003 (studentID) suoritetut opintojaksot arvosanoineen. Opiskelijan nime\u00e4 ei tarvitse tulostaa. Tarvitaan siis vain kaksi taulua. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B. Hae 8 viimeisint\u00e4 kurssisuoritusta lajiteltuna uusimmasta vanhimpaan suoritukseen. Riveill\u00e4 tulee n\u00e4ky\u00e4 kurssin nimi, suoritusp\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 suomalaisessa muodossa esim. 17.02.2021, opiskelijan tunnus studentID ja opintojakson arvosana. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: C. Hae opiskelijoittain heid\u00e4n kaikkien opintojaksosuoritusten keskiarvo. Tulosta opiskelijoiden sukunimi, etunimi ja laskettu keskiarvo. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla:","title":"Harjoitus 5 - Teht\u00e4v\u00e4 4"},{"location":"Harjoitus5/#harjoitus-5-tehtava-5","text":"A. Hae silmien v\u00e4reitt\u00e4in keskim\u00e4\u00e4r\u00e4iset asukasluvut. Ota mukaan omaksi ryhm\u00e4ksi my\u00f6s ne joiden silmien v\u00e4ri\u00e4 ei tiedet\u00e4. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B. Hae kotikaupungeittain ja opintojaksottain kaikkien opintojaksosuoritusten keskiarvo. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: C. Hae opiskelijat tuloineen siten, ett\u00e4 ylim\u00e4\u00e4r\u00e4iseen sarakkeeseen tulee merkint\u00e4 pienituloinen niille, joiden tulot ovat 15000 tai alle ja muille t\u00e4h\u00e4n sarakkeeseen tulee merkint\u00e4 isotuloinen . Lajittele suurituloisimmista pienituloisimpaan. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla:","title":"Harjoitus 5 - Teht\u00e4v\u00e4 5"},{"location":"Harjoitus6/","text":"SQL-taulujen luonti ja muokkaus Harjoitus 6 - Teht\u00e4v\u00e4 1 Teht\u00e4v\u00e4nanto Luo 'Persons' -niminen tietokannan taulu, jossa on sarakkeet + 'hetu', kiinte\u00e4mittainen merkkijono 11 merkki\u00e4, perusavain + 'sukunimi', vaihtuvamittainen merkkijono max 64 merkki\u00e4, pakollinen + 'etunimi', vaihtuvamittainen merkkijono max 64 merkki\u00e4, pakollinen + 'email', vaihtuvamittainen merkkijono max 128 merkki\u00e4, ei ole pakollinen, mutta kahta t\u00e4sm\u00e4lleen samanlaista s\u00e4hk\u00f6postiosoitetta ei voi tallentaa + 'biologinen_sukupuoli', vaihtuvamittainen merkkijono max 32 merkki\u00e4, pakollinen. Sallitut arvot ovat vain 'mies', 'nainen', 'intersukupuolinen'. + 'fobia', vaihtuvamittainen merkkijono max 64 merkki\u00e4, pakollinen, oletusarvo on 'hippopotomonstrosesquippedaliofobia' T\u00e4m\u00e4n teht\u00e4v\u00e4n vastauksena tulee palauttaa SQL-lause taulun luomiseksi sek\u00e4 desc Persons-k\u00e4skyn tulostus ja mahdolliset lis\u00e4kommentit. Luon uuden p\u00f6yd\u00e4n seuraavalla SQL komennolla: T\u00e4st\u00e4 syntyy p\u00f6yt\u00e4 jonka DESC. n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: Harjoitus 6 - Teht\u00e4v\u00e4 2 Teht\u00e4v\u00e4nanto Lis\u00e4\u00e4 `INSERT INTO` -lausein teht\u00e4v\u00e4n 1 `Persons`-tauluun oheinen sis\u00e4lt\u00f6. Vainion Viljan fobia tulee tallentua ilman, ett\u00e4 kirjoitat sit\u00e4 n\u00e4kyviin `INSERT INTO` -lauseessasi mysql> select * FROM Persons; +-------------+----------+---------+----------------+----------------------+-------------------------------------+ | hetu | sukunimi | etunimi | email | biologinen_sukupuoli | fobia | +-------------+----------+---------+----------------+----------------------+-------------------------------------+ | 121212-1234 | Guru | Ken | NULL | intersukupuolinen | fobofobia | | 121212-1235 | Vainio | Elo | elo@mail.com | mies | panofobia | | 121212-1236 | Vainio | Vilja | vilja@mail.com | nainen | hippopotomonstrosesquippedaliofobia | +-------------+----------+---------+----------------+----------------------+-------------------------------------+ 3 rows in set (0.00 sec) Osoita `INSERT INTO` -lausein, ett\u00e4 `Persons`-tauluun ei voi lis\u00e4t\u00e4 rivej\u00e4 joissa A. `sukupuoli` ei ole sallittujen sukupuolten joukossa B. `email` on t\u00e4sm\u00e4lleen sama kuin jollakin jo tauluun jo tallennetulla henkil\u00f6lll\u00e4 C. `hetu` on liian pitk\u00e4 T\u00e4m\u00e4n teht\u00e4v\u00e4n vastauksena tulee palauttaa kaikki k\u00e4ytt\u00e4m\u00e4si `INSERT INTO` -lauseet (6kpl) ja virheilmoitukset n\u00e4iden kolmen viimeisen `INSERT INTO` -operaation ep\u00e4onnistumisesta. Lis\u00e4\u00e4 INSERT INTO -lausein teht\u00e4v\u00e4n 1 Persons-tauluun oheinen sis\u00e4lt\u00f6. Vainion Viljan fobia tulee tallentua ilman, ett\u00e4 kirjoitat sit\u00e4 n\u00e4kyviin INSERT INTO -lauseessasi. Lis\u00e4\u00e4n kyseisen sis\u00e4ll\u00f6n seuraavilla komennoilla: Lopulta Persons -taulu n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: A) Sukupuoli ei ole sallittujen sukupuolten joukossa Lis\u00e4\u00e4n sukupuolen kohdalle arvon 'm\u00f6rk\u00f6': B) Email on t\u00e4sm\u00e4lleen sama kuin jollakin jo tauluun jo tallennetulla henkil\u00f6lll\u00e4 C) Hetu on liian pitk\u00e4 Harjoitus 6 - Teht\u00e4v\u00e4 3 Teht\u00e4v\u00e4nanto T\u00e4ss\u00e4 teht\u00e4v\u00e4ss\u00e4 tarvitaan teht\u00e4viss\u00e4 1 ja 2 luotua `Persons`-taulua 3 rivin sis\u00e4lt\u00f6ineen. Luo lis\u00e4ksi taulu `PhoneManufacturers`, jossa on sarakkeet * (1A) 'id', kokonaisluku, automaattisesti kasvava sarake, pakollinen, perusavain * (1B) 'manufacturer', vaihtuvamittainen merkkijono max 32 merkki\u00e4, pakollinen Luo lis\u00e4ksi taulu 'PhoneNumbers', jossa on sarakkeet: * (2A) 'phonenumber', vaihtuvamittainen merkkijono max 64 merkki\u00e4, pakollinen, perusavain * (2B) 'hetu', kiinte\u00e4mittainen merkkijono 11 merkki\u00e4, pakollinen. T\u00e4m\u00e4 sarake toimiii viiteavaimena Persons-taulun hetu-sarakkeeseen (perusavain). Vy\u00f6rytyss\u00e4\u00e4nt\u00f6n\u00e4 on sek\u00e4 DELETE- ett\u00e4 UPDATE-operaatioille kielt\u00e4\u00e4 sellaisten is\u00e4taulun henkil\u00f6iden poistaminen/muuttaminen, joilla on puhelinnumeroita. * (2C) 'manufacturerID', kokonaisluku, ei pakollinen, oletusarvo NULL. T\u00e4m\u00e4 sarake toimiii viiteavaimena 'PhoneManufacturers-taulun' 'id'-sarakkeeseen (perusavain). Vy\u00f6rytyss\u00e4\u00e4nt\u00f6n\u00e4 on sek\u00e4 DELETE- ett\u00e4 UPDATE-operaatioille asettaa is\u00e4taulun valmistajaksi NULL silloin, kun ollaan poistamassa/muuttamassa sellaisen valmistajan tietoja, joihin on liitettyn\u00e4 puhelinnumeroita. --- Lis\u00e4\u00e4 'INSERT INTO' -lausein 'PhoneManufacturers'-tauluun puhelinvalmistaja Samsung ja Apple. Lis\u00e4\u00e4 henkil\u00f6lle Ken Guru puhelin numeroineen, jonka valmistaja on Samsung. Lis\u00e4\u00e4 henkil\u00f6ille Elo Vainio ja Vilja Vainio puhelimet numeroineen, joiden valmistaja on Apple. --- Poista 'PhoneManufacturers'-taulusta valmistaja Samsung ja totea ett\u00e4 k\u00e4ytt\u00e4j\u00e4n Ken Guru puhelinvalmistaja on NULL t\u00e4m\u00e4n operaation j\u00e4lkeen. Yrit\u00e4 poistaa k\u00e4ytt\u00e4j\u00e4 Vilja Vainio 'Persons'-taulusta ja totea, ett\u00e4 poisto ei onnistu vy\u00f6rytyss\u00e4\u00e4nt\u00f6jen takia. --- T\u00e4m\u00e4n teht\u00e4v\u00e4n vastauksena tulee palauttaa kaikki teht\u00e4v\u00e4n ratkaisemiseksi k\u00e4ytt\u00e4m\u00e4si SQL-lauseet ja mahdolliset n\u00e4ytteet operaatioiden onnistumisesta tai ep\u00e4onnistumisista. Luon kyseiset taulut tietokantaani seuraavilla komennoilla: Sy\u00f6t\u00e4n PhoneManufacturers -tauluun seuraavat tiedot: Jonka j\u00e4lkeen lis\u00e4\u00e4n PhoneNumbers -tauluun omat tiedot jonka j\u00e4lkeen voin p\u00e4ivitt\u00e4\u00e4 Persons -taulun. Lopulta kaikki henkil\u00f6t saavat puhelin numerot ja valmistajat: Nyt poistan PhoneManufacturers -taulusta valmistajan Samsung ja tarkistan Ken Gurun puhelinvalmistajan arvon: manufacturerID on NULL. Nyt koitan poistaa k\u00e4ytt\u00e4j\u00e4n Vilja Vainion ja katson, mit\u00e4 k\u00e4y: T\u00e4st\u00e4 saan virheilmoituksen: T\u00e4m\u00e4 k\u00e4y j\u00e4rkeen, koska asetin vy\u00f6rytyss\u00e4\u00e4nn\u00f6t kielt\u00e4m\u00e4\u00e4n kyseiset poistot ja p\u00e4ivitykset. Hajoitus 6 - Teht\u00e4v\u00e4 4 Teht\u00e4v\u00e4nanto Tee alustava karkea harjoitusty\u00f6n suunnitelma. Pyri vastaamaan suunnitelmalla seuraaviin kysymyksiin * Mik\u00e4 on harjoitusty\u00f6si aihe? * Millainen voisi olla ytimek\u00e4s muutaman virkkeen toimeksianto harjoitusty\u00f6llesi? * Mitk\u00e4 ovat kaikista keskeisimm\u00e4t asiat, joista tietoa tallennetaan tietokantaan? * Millaiset voisivat olla ihan keskeisimm\u00e4t k\u00e4sitteet/taulut, joita harjoitusty\u00f6ss\u00e4si tarvitaan? Voit piirt\u00e4\u00e4 halutessasi kaavion ihan kyn\u00e4lll\u00e4 paperille (palautukseen kuva), draw.io:lla jne. * Mik\u00e4 on alustava harjoitusty\u00f6ryhm\u00e4si kokoonpano? Muuta? T\u00e4m\u00e4n suunnitelman ei tarvitse toteutua, mutta jokaisen t\u00e4st\u00e4 teht\u00e4v\u00e4st\u00e4 pisteit\u00e4 haluavan on esitett\u00e4v\u00e4 t\u00e4ss\u00e4 vaiheessa t\u00e4m\u00e4 suunnitelma. Kaikki samaan ryhm\u00e4\u00e4n (t\u00e4ss\u00e4 vaiheessa) kuuluvat voivat esitt\u00e4\u00e4 saman suunnitelman. * Suunnitelman laajuus A4-tulosteena noin 1/2-1 sivua! * Palautusformaatti vapaa Tee alustava karkea harjoitusty\u00f6n suunnitelma. Mik\u00e4 on harjoitusty\u00f6si aihe? Aiheena on luoda verkkokaupan tietokanta. Millainen voisi olla ytimek\u00e4s muutaman virkkeen toimeksianto harjoitusty\u00f6llesi? Teht\u00e4v\u00e4n\u00e4 on luoda verkkokaupalle tietokanta. Tietokannan avulla verkkokauppa pystyy myym\u00e4\u00e4n tuotteita, pit\u00e4m\u00e4\u00e4n inventaariota ja luomaan kuitteja. T\u00e4m\u00e4n lis\u00e4ksi verkkokaupan asiakkaat pystyv\u00e4t selaamaan tuotteita ja valitsemaan minne ostetut tavarat l\u00e4hetet\u00e4\u00e4n. Mitk\u00e4 ovat kaikista keskeisimm\u00e4t asiat, joista tietoa tallennetaan tietokantaan? Tietoa tallennetaan ainakin seuraavista asioista: Asiakkaista Tavaroista/tuotteista Tilauksista Kuiteista Millaiset voisivat olla ihan keskeisimm\u00e4t k\u00e4sitteet/taulut, joita harjoitusty\u00f6ss\u00e4si tarvitaan? Voit piirt\u00e4\u00e4 halutessasi kaavion ihan kyn\u00e4lll\u00e4 paperille (palautukseen kuva), draw.io:lla jne. K\u00e4sitteit\u00e4: Asiakas - AsiakasID - Etunimi - Sukunimi - Osoite Tuote - TuoteID - Nimi - Kuvaus - Hinta - Kategoria Tilaus (T\u00e4st\u00e4 luodaan kuitti) - TilausID - AsiakasID - Osoite - MaksettuHinta - PostinSeurantanumero - P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 Inventaario - InventaarioID - Tuote - M\u00e4\u00e4r\u00e4 - Sijainti T\u00e4st\u00e4 voin tehd\u00e4 nopean ER -kaavion DrawIO:lla: T\u00e4st\u00e4 voi n\u00e4hd\u00e4 t\u00e4rkeimm\u00e4t taulut ja niiden relaatiot. Mik\u00e4 on alustava harjoitusty\u00f6ryhm\u00e4si kokoonpano? Herkko Meht\u00e4l\u00e4 (Min\u00e4) Eli min\u00e4 tekisin t\u00e4m\u00e4n projektin itse.","title":"SQL-taulujen luonti ja muokkaus"},{"location":"Harjoitus6/#sql-taulujen-luonti-ja-muokkaus","text":"","title":"SQL-taulujen luonti ja muokkaus"},{"location":"Harjoitus6/#harjoitus-6-tehtava-1","text":"Teht\u00e4v\u00e4nanto Luo 'Persons' -niminen tietokannan taulu, jossa on sarakkeet + 'hetu', kiinte\u00e4mittainen merkkijono 11 merkki\u00e4, perusavain + 'sukunimi', vaihtuvamittainen merkkijono max 64 merkki\u00e4, pakollinen + 'etunimi', vaihtuvamittainen merkkijono max 64 merkki\u00e4, pakollinen + 'email', vaihtuvamittainen merkkijono max 128 merkki\u00e4, ei ole pakollinen, mutta kahta t\u00e4sm\u00e4lleen samanlaista s\u00e4hk\u00f6postiosoitetta ei voi tallentaa + 'biologinen_sukupuoli', vaihtuvamittainen merkkijono max 32 merkki\u00e4, pakollinen. Sallitut arvot ovat vain 'mies', 'nainen', 'intersukupuolinen'. + 'fobia', vaihtuvamittainen merkkijono max 64 merkki\u00e4, pakollinen, oletusarvo on 'hippopotomonstrosesquippedaliofobia' T\u00e4m\u00e4n teht\u00e4v\u00e4n vastauksena tulee palauttaa SQL-lause taulun luomiseksi sek\u00e4 desc Persons-k\u00e4skyn tulostus ja mahdolliset lis\u00e4kommentit. Luon uuden p\u00f6yd\u00e4n seuraavalla SQL komennolla: T\u00e4st\u00e4 syntyy p\u00f6yt\u00e4 jonka DESC. n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4:","title":"Harjoitus 6 - Teht\u00e4v\u00e4 1"},{"location":"Harjoitus6/#harjoitus-6-tehtava-2","text":"Teht\u00e4v\u00e4nanto Lis\u00e4\u00e4 `INSERT INTO` -lausein teht\u00e4v\u00e4n 1 `Persons`-tauluun oheinen sis\u00e4lt\u00f6. Vainion Viljan fobia tulee tallentua ilman, ett\u00e4 kirjoitat sit\u00e4 n\u00e4kyviin `INSERT INTO` -lauseessasi mysql> select * FROM Persons; +-------------+----------+---------+----------------+----------------------+-------------------------------------+ | hetu | sukunimi | etunimi | email | biologinen_sukupuoli | fobia | +-------------+----------+---------+----------------+----------------------+-------------------------------------+ | 121212-1234 | Guru | Ken | NULL | intersukupuolinen | fobofobia | | 121212-1235 | Vainio | Elo | elo@mail.com | mies | panofobia | | 121212-1236 | Vainio | Vilja | vilja@mail.com | nainen | hippopotomonstrosesquippedaliofobia | +-------------+----------+---------+----------------+----------------------+-------------------------------------+ 3 rows in set (0.00 sec) Osoita `INSERT INTO` -lausein, ett\u00e4 `Persons`-tauluun ei voi lis\u00e4t\u00e4 rivej\u00e4 joissa A. `sukupuoli` ei ole sallittujen sukupuolten joukossa B. `email` on t\u00e4sm\u00e4lleen sama kuin jollakin jo tauluun jo tallennetulla henkil\u00f6lll\u00e4 C. `hetu` on liian pitk\u00e4 T\u00e4m\u00e4n teht\u00e4v\u00e4n vastauksena tulee palauttaa kaikki k\u00e4ytt\u00e4m\u00e4si `INSERT INTO` -lauseet (6kpl) ja virheilmoitukset n\u00e4iden kolmen viimeisen `INSERT INTO` -operaation ep\u00e4onnistumisesta. Lis\u00e4\u00e4 INSERT INTO -lausein teht\u00e4v\u00e4n 1 Persons-tauluun oheinen sis\u00e4lt\u00f6. Vainion Viljan fobia tulee tallentua ilman, ett\u00e4 kirjoitat sit\u00e4 n\u00e4kyviin INSERT INTO -lauseessasi. Lis\u00e4\u00e4n kyseisen sis\u00e4ll\u00f6n seuraavilla komennoilla: Lopulta Persons -taulu n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4: A) Sukupuoli ei ole sallittujen sukupuolten joukossa Lis\u00e4\u00e4n sukupuolen kohdalle arvon 'm\u00f6rk\u00f6': B) Email on t\u00e4sm\u00e4lleen sama kuin jollakin jo tauluun jo tallennetulla henkil\u00f6lll\u00e4 C) Hetu on liian pitk\u00e4","title":"Harjoitus 6 - Teht\u00e4v\u00e4 2"},{"location":"Harjoitus6/#harjoitus-6-tehtava-3","text":"Teht\u00e4v\u00e4nanto T\u00e4ss\u00e4 teht\u00e4v\u00e4ss\u00e4 tarvitaan teht\u00e4viss\u00e4 1 ja 2 luotua `Persons`-taulua 3 rivin sis\u00e4lt\u00f6ineen. Luo lis\u00e4ksi taulu `PhoneManufacturers`, jossa on sarakkeet * (1A) 'id', kokonaisluku, automaattisesti kasvava sarake, pakollinen, perusavain * (1B) 'manufacturer', vaihtuvamittainen merkkijono max 32 merkki\u00e4, pakollinen Luo lis\u00e4ksi taulu 'PhoneNumbers', jossa on sarakkeet: * (2A) 'phonenumber', vaihtuvamittainen merkkijono max 64 merkki\u00e4, pakollinen, perusavain * (2B) 'hetu', kiinte\u00e4mittainen merkkijono 11 merkki\u00e4, pakollinen. T\u00e4m\u00e4 sarake toimiii viiteavaimena Persons-taulun hetu-sarakkeeseen (perusavain). Vy\u00f6rytyss\u00e4\u00e4nt\u00f6n\u00e4 on sek\u00e4 DELETE- ett\u00e4 UPDATE-operaatioille kielt\u00e4\u00e4 sellaisten is\u00e4taulun henkil\u00f6iden poistaminen/muuttaminen, joilla on puhelinnumeroita. * (2C) 'manufacturerID', kokonaisluku, ei pakollinen, oletusarvo NULL. T\u00e4m\u00e4 sarake toimiii viiteavaimena 'PhoneManufacturers-taulun' 'id'-sarakkeeseen (perusavain). Vy\u00f6rytyss\u00e4\u00e4nt\u00f6n\u00e4 on sek\u00e4 DELETE- ett\u00e4 UPDATE-operaatioille asettaa is\u00e4taulun valmistajaksi NULL silloin, kun ollaan poistamassa/muuttamassa sellaisen valmistajan tietoja, joihin on liitettyn\u00e4 puhelinnumeroita. --- Lis\u00e4\u00e4 'INSERT INTO' -lausein 'PhoneManufacturers'-tauluun puhelinvalmistaja Samsung ja Apple. Lis\u00e4\u00e4 henkil\u00f6lle Ken Guru puhelin numeroineen, jonka valmistaja on Samsung. Lis\u00e4\u00e4 henkil\u00f6ille Elo Vainio ja Vilja Vainio puhelimet numeroineen, joiden valmistaja on Apple. --- Poista 'PhoneManufacturers'-taulusta valmistaja Samsung ja totea ett\u00e4 k\u00e4ytt\u00e4j\u00e4n Ken Guru puhelinvalmistaja on NULL t\u00e4m\u00e4n operaation j\u00e4lkeen. Yrit\u00e4 poistaa k\u00e4ytt\u00e4j\u00e4 Vilja Vainio 'Persons'-taulusta ja totea, ett\u00e4 poisto ei onnistu vy\u00f6rytyss\u00e4\u00e4nt\u00f6jen takia. --- T\u00e4m\u00e4n teht\u00e4v\u00e4n vastauksena tulee palauttaa kaikki teht\u00e4v\u00e4n ratkaisemiseksi k\u00e4ytt\u00e4m\u00e4si SQL-lauseet ja mahdolliset n\u00e4ytteet operaatioiden onnistumisesta tai ep\u00e4onnistumisista. Luon kyseiset taulut tietokantaani seuraavilla komennoilla: Sy\u00f6t\u00e4n PhoneManufacturers -tauluun seuraavat tiedot: Jonka j\u00e4lkeen lis\u00e4\u00e4n PhoneNumbers -tauluun omat tiedot jonka j\u00e4lkeen voin p\u00e4ivitt\u00e4\u00e4 Persons -taulun. Lopulta kaikki henkil\u00f6t saavat puhelin numerot ja valmistajat: Nyt poistan PhoneManufacturers -taulusta valmistajan Samsung ja tarkistan Ken Gurun puhelinvalmistajan arvon: manufacturerID on NULL. Nyt koitan poistaa k\u00e4ytt\u00e4j\u00e4n Vilja Vainion ja katson, mit\u00e4 k\u00e4y: T\u00e4st\u00e4 saan virheilmoituksen: T\u00e4m\u00e4 k\u00e4y j\u00e4rkeen, koska asetin vy\u00f6rytyss\u00e4\u00e4nn\u00f6t kielt\u00e4m\u00e4\u00e4n kyseiset poistot ja p\u00e4ivitykset.","title":"Harjoitus 6 - Teht\u00e4v\u00e4 3"},{"location":"Harjoitus6/#hajoitus-6-tehtava-4","text":"Teht\u00e4v\u00e4nanto Tee alustava karkea harjoitusty\u00f6n suunnitelma. Pyri vastaamaan suunnitelmalla seuraaviin kysymyksiin * Mik\u00e4 on harjoitusty\u00f6si aihe? * Millainen voisi olla ytimek\u00e4s muutaman virkkeen toimeksianto harjoitusty\u00f6llesi? * Mitk\u00e4 ovat kaikista keskeisimm\u00e4t asiat, joista tietoa tallennetaan tietokantaan? * Millaiset voisivat olla ihan keskeisimm\u00e4t k\u00e4sitteet/taulut, joita harjoitusty\u00f6ss\u00e4si tarvitaan? Voit piirt\u00e4\u00e4 halutessasi kaavion ihan kyn\u00e4lll\u00e4 paperille (palautukseen kuva), draw.io:lla jne. * Mik\u00e4 on alustava harjoitusty\u00f6ryhm\u00e4si kokoonpano? Muuta? T\u00e4m\u00e4n suunnitelman ei tarvitse toteutua, mutta jokaisen t\u00e4st\u00e4 teht\u00e4v\u00e4st\u00e4 pisteit\u00e4 haluavan on esitett\u00e4v\u00e4 t\u00e4ss\u00e4 vaiheessa t\u00e4m\u00e4 suunnitelma. Kaikki samaan ryhm\u00e4\u00e4n (t\u00e4ss\u00e4 vaiheessa) kuuluvat voivat esitt\u00e4\u00e4 saman suunnitelman. * Suunnitelman laajuus A4-tulosteena noin 1/2-1 sivua! * Palautusformaatti vapaa Tee alustava karkea harjoitusty\u00f6n suunnitelma. Mik\u00e4 on harjoitusty\u00f6si aihe? Aiheena on luoda verkkokaupan tietokanta. Millainen voisi olla ytimek\u00e4s muutaman virkkeen toimeksianto harjoitusty\u00f6llesi? Teht\u00e4v\u00e4n\u00e4 on luoda verkkokaupalle tietokanta. Tietokannan avulla verkkokauppa pystyy myym\u00e4\u00e4n tuotteita, pit\u00e4m\u00e4\u00e4n inventaariota ja luomaan kuitteja. T\u00e4m\u00e4n lis\u00e4ksi verkkokaupan asiakkaat pystyv\u00e4t selaamaan tuotteita ja valitsemaan minne ostetut tavarat l\u00e4hetet\u00e4\u00e4n. Mitk\u00e4 ovat kaikista keskeisimm\u00e4t asiat, joista tietoa tallennetaan tietokantaan? Tietoa tallennetaan ainakin seuraavista asioista: Asiakkaista Tavaroista/tuotteista Tilauksista Kuiteista Millaiset voisivat olla ihan keskeisimm\u00e4t k\u00e4sitteet/taulut, joita harjoitusty\u00f6ss\u00e4si tarvitaan? Voit piirt\u00e4\u00e4 halutessasi kaavion ihan kyn\u00e4lll\u00e4 paperille (palautukseen kuva), draw.io:lla jne. K\u00e4sitteit\u00e4: Asiakas - AsiakasID - Etunimi - Sukunimi - Osoite Tuote - TuoteID - Nimi - Kuvaus - Hinta - Kategoria Tilaus (T\u00e4st\u00e4 luodaan kuitti) - TilausID - AsiakasID - Osoite - MaksettuHinta - PostinSeurantanumero - P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 Inventaario - InventaarioID - Tuote - M\u00e4\u00e4r\u00e4 - Sijainti T\u00e4st\u00e4 voin tehd\u00e4 nopean ER -kaavion DrawIO:lla: T\u00e4st\u00e4 voi n\u00e4hd\u00e4 t\u00e4rkeimm\u00e4t taulut ja niiden relaatiot. Mik\u00e4 on alustava harjoitusty\u00f6ryhm\u00e4si kokoonpano? Herkko Meht\u00e4l\u00e4 (Min\u00e4) Eli min\u00e4 tekisin t\u00e4m\u00e4n projektin itse.","title":"Hajoitus 6 - Teht\u00e4v\u00e4 4"},{"location":"Harjoitus7/","text":"Alikyselyt, n\u00e4kym\u00e4t ja indeksointi Harjoitus 7 - Teht\u00e4v\u00e4 1 A) Tee n\u00e4kym\u00e4 Turku, joka hakee students-taulusta kaikki turkulaiset opiskelijat. Sarakkeista tulostetaan mukaan j\u00e4rjestyksess\u00e4 seuraavat: firstname, lastname, eyecolor ja incomes. Testaa n\u00e4kym\u00e4n toiminta kokeilemalla sit\u00e4. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B) Tee n\u00e4kym\u00e4 Oliot, joka tulostaa kaikki students-taulun opiskelijoiden nimet yhdess\u00e4 sarakkeessa muodossa Etunimisukunimi. Esim. Kenguru, Tinosaurus, jne. Vain ensimm\u00e4inen merkki voi tulostua isolla (suuraakkonen, versaali). Sarakkeen otsikko tulee olla my\u00f6s Oliot. N\u00e4kym\u00e4\u00e4 k\u00e4ytett\u00e4ess\u00e4 oliot tulee tulostaa aakkosj\u00e4rjestyksess\u00e4. Testaa n\u00e4kym\u00e4n toiminta kokeilemalla sit\u00e4. Vastauksessa tulee olla n\u00e4kyvill\u00e4 n\u00e4kym\u00e4n luonti ja sen testaaminen. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: Harjoitus 7 - Teht\u00e4v\u00e4 2 A) Tee n\u00e4kym\u00e4 KaupunkiKeskiarvoTulot joka tulostaa opiskelijoiden keskiarvotulot kaupungeittain. Tulostuksessa n\u00e4ytet\u00e4\u00e4n kunkin kaupungin nimi ja kaupunkikohtaiset keskiarvotulot ja sarakkeiden otsikot tulee olla Kaupunki ja KAtulot. Kotikaupungittomia ei oteta mukaan t\u00e4h\u00e4n n\u00e4kym\u00e4\u00e4n. N\u00e4kym\u00e4\u00e4 k\u00e4ytett\u00e4ess\u00e4 kaupungit tulee lajitella keskiarvotulon perusteella laskevassa j\u00e4rjestyksess\u00e4. Testaa n\u00e4kym\u00e4n toiminta kokeilemalla sit\u00e4. Vastauksessa tulee olla n\u00e4kyvill\u00e4 n\u00e4kym\u00e4n luonti ja sen testaaminen. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B) Tee n\u00e4kym\u00e4 Stipendiehdokkaat jonka avulla voidaan tulostaa 4 parasta opintosuoritusta. Riveitt\u00e4in n\u00e4kyy opiskelijan sukunimi, etunimi, kurssi ja kurssiarvosana, kuten alla mallissa. Arvosanan lis\u00e4ksi lajitteluehdot ovat j\u00e4rjestyksess\u00e4 kurssin nimi (ASC), sukunimi (ASC) ja etunimi(ASC). Testaa n\u00e4kym\u00e4n toiminta kokeilemalla sit\u00e4. Vastauksessa tulee olla n\u00e4kyvill\u00e4 n\u00e4kym\u00e4n luonti ja sen testaaminen. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: Harjoitus 7 - Teht\u00e4v\u00e4 3 A) Hae ne opiskelijat (suku- ja etunimell\u00e4), joilla on sama kotikunta kuin Ken Gurulla. Ken Gurun kotikuntaa ei tiedet\u00e4 kysely\u00e4 kirjoitettaessa (se voi olla mik\u00e4 tahansa). K\u00e4yt\u00e4 alikysely\u00e4. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B) Hae pienituloisimmat opiskelijat. Pienint\u00e4 palkkaa ei tiedet\u00e4 kysely\u00e4 kirjoitettaessa. Tulossarakkeina suku- ja etunimi sek\u00e4 tulot. K\u00e4yt\u00e4 alikysely\u00e4. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: Harjoitus 7 - Teht\u00e4v\u00e4 4 Ei teht\u00e4vi\u00e4 Harjoitus 7 - Teht\u00e4v\u00e4 5 Luo nk. 3 t\u00e4hden paksu indeksi SQL-kyselylle SELECT lastname, firstname, incomes FROM students WHERE hometown = 1 ORDER BY taxrate DESC; T\u00e4m\u00e4n voi tehd\u00e4 seuraavalla komennolla:","title":"Alikyselyt, n\u00e4kym\u00e4t ja indeksointi"},{"location":"Harjoitus7/#alikyselyt-nakymat-ja-indeksointi","text":"","title":"Alikyselyt, n\u00e4kym\u00e4t ja indeksointi"},{"location":"Harjoitus7/#harjoitus-7-tehtava-1","text":"A) Tee n\u00e4kym\u00e4 Turku, joka hakee students-taulusta kaikki turkulaiset opiskelijat. Sarakkeista tulostetaan mukaan j\u00e4rjestyksess\u00e4 seuraavat: firstname, lastname, eyecolor ja incomes. Testaa n\u00e4kym\u00e4n toiminta kokeilemalla sit\u00e4. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B) Tee n\u00e4kym\u00e4 Oliot, joka tulostaa kaikki students-taulun opiskelijoiden nimet yhdess\u00e4 sarakkeessa muodossa Etunimisukunimi. Esim. Kenguru, Tinosaurus, jne. Vain ensimm\u00e4inen merkki voi tulostua isolla (suuraakkonen, versaali). Sarakkeen otsikko tulee olla my\u00f6s Oliot. N\u00e4kym\u00e4\u00e4 k\u00e4ytett\u00e4ess\u00e4 oliot tulee tulostaa aakkosj\u00e4rjestyksess\u00e4. Testaa n\u00e4kym\u00e4n toiminta kokeilemalla sit\u00e4. Vastauksessa tulee olla n\u00e4kyvill\u00e4 n\u00e4kym\u00e4n luonti ja sen testaaminen. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla:","title":"Harjoitus 7 - Teht\u00e4v\u00e4 1"},{"location":"Harjoitus7/#harjoitus-7-tehtava-2","text":"A) Tee n\u00e4kym\u00e4 KaupunkiKeskiarvoTulot joka tulostaa opiskelijoiden keskiarvotulot kaupungeittain. Tulostuksessa n\u00e4ytet\u00e4\u00e4n kunkin kaupungin nimi ja kaupunkikohtaiset keskiarvotulot ja sarakkeiden otsikot tulee olla Kaupunki ja KAtulot. Kotikaupungittomia ei oteta mukaan t\u00e4h\u00e4n n\u00e4kym\u00e4\u00e4n. N\u00e4kym\u00e4\u00e4 k\u00e4ytett\u00e4ess\u00e4 kaupungit tulee lajitella keskiarvotulon perusteella laskevassa j\u00e4rjestyksess\u00e4. Testaa n\u00e4kym\u00e4n toiminta kokeilemalla sit\u00e4. Vastauksessa tulee olla n\u00e4kyvill\u00e4 n\u00e4kym\u00e4n luonti ja sen testaaminen. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B) Tee n\u00e4kym\u00e4 Stipendiehdokkaat jonka avulla voidaan tulostaa 4 parasta opintosuoritusta. Riveitt\u00e4in n\u00e4kyy opiskelijan sukunimi, etunimi, kurssi ja kurssiarvosana, kuten alla mallissa. Arvosanan lis\u00e4ksi lajitteluehdot ovat j\u00e4rjestyksess\u00e4 kurssin nimi (ASC), sukunimi (ASC) ja etunimi(ASC). Testaa n\u00e4kym\u00e4n toiminta kokeilemalla sit\u00e4. Vastauksessa tulee olla n\u00e4kyvill\u00e4 n\u00e4kym\u00e4n luonti ja sen testaaminen. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla:","title":"Harjoitus 7 - Teht\u00e4v\u00e4 2"},{"location":"Harjoitus7/#harjoitus-7-tehtava-3","text":"A) Hae ne opiskelijat (suku- ja etunimell\u00e4), joilla on sama kotikunta kuin Ken Gurulla. Ken Gurun kotikuntaa ei tiedet\u00e4 kysely\u00e4 kirjoitettaessa (se voi olla mik\u00e4 tahansa). K\u00e4yt\u00e4 alikysely\u00e4. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: B) Hae pienituloisimmat opiskelijat. Pienint\u00e4 palkkaa ei tiedet\u00e4 kysely\u00e4 kirjoitettaessa. Tulossarakkeina suku- ja etunimi sek\u00e4 tulot. K\u00e4yt\u00e4 alikysely\u00e4. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla:","title":"Harjoitus 7 - Teht\u00e4v\u00e4 3"},{"location":"Harjoitus7/#harjoitus-7-tehtava-4","text":"Ei teht\u00e4vi\u00e4","title":"Harjoitus 7 - Teht\u00e4v\u00e4 4"},{"location":"Harjoitus7/#harjoitus-7-tehtava-5","text":"Luo nk. 3 t\u00e4hden paksu indeksi SQL-kyselylle SELECT lastname, firstname, incomes FROM students WHERE hometown = 1 ORDER BY taxrate DESC; T\u00e4m\u00e4n voi tehd\u00e4 seuraavalla komennolla:","title":"Harjoitus 7 - Teht\u00e4v\u00e4 5"},{"location":"Harjoitus8/","text":"Transaktiot, her\u00e4ttimet ja rollback Harjoitus 8 - Teht\u00e4v\u00e4 1 Luo sellainen triggeri opintojakson esimerkkitietokantaan http://netisto.fi/oppaat/tietokannat/?id=03 , ett\u00e4 yli miljoonan asukkaan kotikaupunkeja ei voi lis\u00e4t\u00e4 INSERT INTO -lauseella cities-tauluun. T\u00e4m\u00e4n voi tehd\u00e4 seuraavalla komennolla: T\u00e4st\u00e4 syntyy virheilmoitus: Harjoitus 8 - Teht\u00e4v\u00e4 2 Luo transaktio jossa opintojakson esimerkkitietokannan http://netisto.fi/oppaat/tietokannat/?id=03 1) cities-tauluun lis\u00e4t\u00e4\u00e4n kaksi uutta kaupunkia yhdell\u00e4 INSERT INTO -lauseella JA 2) students-tauluun lis\u00e4t\u00e4\u00e4n kaksi uutta opiskelijaa yhdell\u00e4 INSERT INTO -lauseella, joiden kotikuntana on jompikumpi kohdassa A) lis\u00e4tyist\u00e4 kotikaupungeista T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: Tarkistan transaktion... Kaikki lis\u00e4ykset on lis\u00e4tty onnistuneesti! Harjoitus 8 - Teht\u00e4v\u00e4 3 Luo transaktio jossa opintojakson esimerkkitietokannan http://netisto.fi/oppaat/tietokannat/?id=03 1) cities-tauluun lis\u00e4t\u00e4\u00e4n kaksi uutta kaupunkia yhdell\u00e4 INSERT INTO -lauseella JA 2) students-tauluun lis\u00e4t\u00e4\u00e4n kaksi uutta opiskelijaa yhdell\u00e4 INSERT INTO -lauseella, joiden studentID on virheellisesti sama. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: Tarkastetaan transaktiot... Kaupunkien lis\u00e4ys onnistui, mutta opiskelijan lis\u00e4ys ei onnistunut! Harjoitus 8 - Teht\u00e4v\u00e4 4 Luo edellisen teht\u00e4v\u00e4n transaktion yhteyteen sellainen sp_fail()-niminen tallennettu proseduuri (stored procedure), jota kutsuessa kaikki INSERT INTO-lauseet peruutetaan (ROLLBACK), jos yhdenkin suoritus ep\u00e4onnistuu jostakin syyst\u00e4. Jos kaikki INSERT INTO -lauseet ovat suoritettavissa, transaktio hyv\u00e4ksyt\u00e4\u00e4n kokonaisuudessaan (COMMIT). T\u00e4m\u00e4n voi tehd\u00e4 seuraavalla komennolla: T\u00e4m\u00e4 tuottaa virheilmoituksen duplicate entry PRIMARY KEY students-taulussa, joten proseduurin SQLEXCEPTION handler muuttaa _rollback -muuttujan 1, joka aiheuttaa ROLLBACK:in ajamisen. T\u00e4m\u00e4 poistaa my\u00f6s uudet kaupungit cities-taulussa. Tarkastetaan tilanne... students-taulussa ei ole tapahtunut muutoksia, mutta ei my\u00f6sk\u00e4\u00e4n cities-taulussa! sp_fail() proseduuri onnistui rollbackin teossa!","title":"Transaktiot, her\u00e4ttimet ja rollback"},{"location":"Harjoitus8/#transaktiot-herattimet-ja-rollback","text":"","title":"Transaktiot, her\u00e4ttimet ja rollback"},{"location":"Harjoitus8/#harjoitus-8-tehtava-1","text":"Luo sellainen triggeri opintojakson esimerkkitietokantaan http://netisto.fi/oppaat/tietokannat/?id=03 , ett\u00e4 yli miljoonan asukkaan kotikaupunkeja ei voi lis\u00e4t\u00e4 INSERT INTO -lauseella cities-tauluun. T\u00e4m\u00e4n voi tehd\u00e4 seuraavalla komennolla: T\u00e4st\u00e4 syntyy virheilmoitus:","title":"Harjoitus 8 - Teht\u00e4v\u00e4 1"},{"location":"Harjoitus8/#harjoitus-8-tehtava-2","text":"Luo transaktio jossa opintojakson esimerkkitietokannan http://netisto.fi/oppaat/tietokannat/?id=03 1) cities-tauluun lis\u00e4t\u00e4\u00e4n kaksi uutta kaupunkia yhdell\u00e4 INSERT INTO -lauseella JA 2) students-tauluun lis\u00e4t\u00e4\u00e4n kaksi uutta opiskelijaa yhdell\u00e4 INSERT INTO -lauseella, joiden kotikuntana on jompikumpi kohdassa A) lis\u00e4tyist\u00e4 kotikaupungeista T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: Tarkistan transaktion... Kaikki lis\u00e4ykset on lis\u00e4tty onnistuneesti!","title":"Harjoitus 8 - Teht\u00e4v\u00e4 2"},{"location":"Harjoitus8/#harjoitus-8-tehtava-3","text":"Luo transaktio jossa opintojakson esimerkkitietokannan http://netisto.fi/oppaat/tietokannat/?id=03 1) cities-tauluun lis\u00e4t\u00e4\u00e4n kaksi uutta kaupunkia yhdell\u00e4 INSERT INTO -lauseella JA 2) students-tauluun lis\u00e4t\u00e4\u00e4n kaksi uutta opiskelijaa yhdell\u00e4 INSERT INTO -lauseella, joiden studentID on virheellisesti sama. T\u00e4m\u00e4n voi suorittaa seuraavalla komennolla: Tarkastetaan transaktiot... Kaupunkien lis\u00e4ys onnistui, mutta opiskelijan lis\u00e4ys ei onnistunut!","title":"Harjoitus 8 - Teht\u00e4v\u00e4 3"},{"location":"Harjoitus8/#harjoitus-8-tehtava-4","text":"Luo edellisen teht\u00e4v\u00e4n transaktion yhteyteen sellainen sp_fail()-niminen tallennettu proseduuri (stored procedure), jota kutsuessa kaikki INSERT INTO-lauseet peruutetaan (ROLLBACK), jos yhdenkin suoritus ep\u00e4onnistuu jostakin syyst\u00e4. Jos kaikki INSERT INTO -lauseet ovat suoritettavissa, transaktio hyv\u00e4ksyt\u00e4\u00e4n kokonaisuudessaan (COMMIT). T\u00e4m\u00e4n voi tehd\u00e4 seuraavalla komennolla: T\u00e4m\u00e4 tuottaa virheilmoituksen duplicate entry PRIMARY KEY students-taulussa, joten proseduurin SQLEXCEPTION handler muuttaa _rollback -muuttujan 1, joka aiheuttaa ROLLBACK:in ajamisen. T\u00e4m\u00e4 poistaa my\u00f6s uudet kaupungit cities-taulussa. Tarkastetaan tilanne... students-taulussa ei ole tapahtunut muutoksia, mutta ei my\u00f6sk\u00e4\u00e4n cities-taulussa! sp_fail() proseduuri onnistui rollbackin teossa!","title":"Harjoitus 8 - Teht\u00e4v\u00e4 4"},{"location":"Harjoitus9/","text":"Kertausharjoitus Harjoitus 9 - Teht\u00e4v\u00e4 1 Teht\u00e4v\u00e4: Suunnittele ja toteuta tietokanta. Aihe: todennetun osaamisen rekisteri (TOR) Toimeksiantaja: Opetus- ja kulttuuriministeri\u00f6 tai esim. yrityksen/oppilaitoksen projektitoimisto. Lis\u00e4tietoja: Ari Rantala. Pakolliset toiminnot/tallennettavat tiedot: Henkil\u00f6tietojen yll\u00e4pito (v\u00e4hint\u00e4\u00e4n henkil\u00f6n nimi) Osaamistietojen yll\u00e4pito (v\u00e4hint\u00e4\u00e4n taidon nimi ja tarkempi kuvaus) Henkil\u00f6n tekem\u00e4 itsearvio ja/tai asiantuntijan tekem\u00e4 arvio henkil\u00f6n osaamisesta (asteikolla 0-10) Lis\u00e4tietoja ja -vaatimuksia: Esimerkkej\u00e4 osaamisista, osaamiskuvauksista ja niiden ryhmittelyist\u00e4. Tietokantaan ei tallenneta henkil\u00f6ille osaamistietoa ilman arviota (itsearvio tai asiantuntijan arvio) Henkil\u00f6tietoina tulee voida tallentaa tieto henkil\u00f6n tyypist\u00e4 kuvauksineen (esim. Tavis -> Tavallinen arvioitava; Asiantuntija -> OKM:n asiantuntija-arvioija; ...) Yksi arvioija voi antaa tietylle henkil\u00f6lle VAIN YHDEN arvion yht\u00e4 osaamista kohti! T\u00e4st\u00e4 voin aloittaa k\u00e4sitteiden kartoittamisen: Henkil\u00f6tiedot Henkil\u00f6tunnus (ID) Henkil\u00f6n nimi Kotikaupunki Henkil\u00f6kuvaus Osaamistiedot TaitoID Taidon nimi Taidon lyhyt kuvaus Kategoria Osaamisen arvio ArvioID ArvioitavaHenkil\u00f6 Taito Osaaminen Arvioija N\u00e4ist\u00e4 k\u00e4sitteist\u00e4 voin luoda nopean ER-kaavion: HUOM Kuvassa Arvioija ja TaitoArvion taulujen relaation p\u00e4\u00e4t ovat v\u00e4\u00e4rinp\u00e4in! T\u00e4st\u00e4 voi hahmotella tietokannan rakenteen helposti. ER-kaavion mukaan: Tietyll\u00e4 taidolla voi olla monta arviota, mutta yhdell\u00e4 arviolla voi olla vain yksi tietty taito. Yhdell\u00e4 arviolla voi olla vain yksi arvioija. * Henkil\u00f6ll\u00e4 voi olla monta taitoa ja arviota, mutta tietty arvio on vain yhdelle henkil\u00f6lle. T\u00e4st\u00e4 voin rakentaa EER-kaavion MySQL Workbench:siss\u00e4. Kun t\u00e4m\u00e4 tehd\u00e4\u00e4n Forward engineer -optiolla, saadaan t\u00e4st\u00e4 seuraava SQL-komento: -- MySQL Workbench Forward Engineering SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'; -- ----------------------------------------------------- -- Schema mydb -- ----------------------------------------------------- -- ----------------------------------------------------- -- Schema mydb -- ----------------------------------------------------- CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ; USE `mydb` ; -- ----------------------------------------------------- -- Table `mydb`.`Henkilo` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `mydb`.`Henkilo` ( `Henkilotunnus` INT NOT NULL, `Nimi` VARCHAR(45) NOT NULL, `Kotikunta` VARCHAR(45) NULL, `HenkiloKuvaus` VARCHAR(64) NULL, PRIMARY KEY (`Henkilotunnus`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `mydb`.`Taito` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `mydb`.`Taito` ( `TaitoID` INT NOT NULL, `Taito` VARCHAR(45) NOT NULL, `Kuvaus` VARCHAR(45) NOT NULL, PRIMARY KEY (`TaitoID`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `mydb`.`Arvioija` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `mydb`.`Arvioija` ( `ArvioijaID` INT NOT NULL, `Nimi` VARCHAR(45) NOT NULL, `Kuvaus` VARCHAR(45) NOT NULL, PRIMARY KEY (`ArvioijaID`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `mydb`.`TaitoArvio` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `mydb`.`TaitoArvio` ( `Taito_TaitoID` INT NOT NULL, `Henkilo_Henkilotunnus` INT NOT NULL, `Arvo` INT NOT NULL, `Arvioija` INT NOT NULL, PRIMARY KEY (`Taito_TaitoID`, `Henkilo_Henkilotunnus`), INDEX `fk_Taito_has_Henkilo_Henkilo1_idx` (`Henkilo_Henkilotunnus` ASC), INDEX `fk_Taito_has_Henkilo_Taito_idx` (`Taito_TaitoID` ASC), INDEX `fk_TaitoArvio_Arvioija1_idx` (`Arvioija` ASC), CONSTRAINT `fk_Taito_has_Henkilo_Taito` FOREIGN KEY (`Taito_TaitoID`) REFERENCES `mydb`.`Taito` (`TaitoID`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Taito_has_Henkilo_Henkilo1` FOREIGN KEY (`Henkilo_Henkilotunnus`) REFERENCES `mydb`.`Henkilo` (`Henkilotunnus`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_TaitoArvio_Arvioija1` FOREIGN KEY (`Arvioija`) REFERENCES `mydb`.`Arvioija` (`ArvioijaID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; SET SQL_MODE=@OLD_SQL_MODE; SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS; Huomasin, ett\u00e4 taito -p\u00f6yd\u00e4st\u00e4 puuttuu \"kategoria\" -attribuutti, joten lis\u00e4\u00e4n sen komennolla: ALTER TABLE taito ADD kategoria varchar(45); Harjoitus 9 - Teht\u00e4v\u00e4 2 Lis\u00e4\u00e4 TOR-tietokantaasi tietoa siten, ett\u00e4 jokaisessa taulussa on v\u00e4hint\u00e4\u00e4n kaksi rivi\u00e4 ja sinne on tallennettuna: Ainakin kahden tavallisen ja kahden asiantuntijan kuvitteelliset tiedot Ainakin kaksi erilaista osaamista per osaamisryhm\u00e4 (Tekniset p\u00e4tevyydet, jne.) * Itsearvioita ja asiantuntija-arvioita ainakin parille henkil\u00f6lle siten, ett\u00e4 pystyt\u00e4\u00e4n laskemaan keskiarvoja osaamisittain ja osaamisryhmitt\u00e4in. Lis\u00e4\u00e4n tietokantaani tietoa henkil\u00f6ist\u00e4, taidoista ja arvioijista. Lis\u00e4\u00e4n tietokannan p\u00f6ytiin uusia rivej\u00e4 INSERT INTO -komennolla: T\u00e4m\u00e4 tehd\u00e4\u00e4n muillekkin tiedoille, kunnes minulla on tarpeeksi tietoja tauluissa: Nyt osaamistietokannassani on tietoa! MySQL koodia: INSERT INTO henkilo VALUES(1, \"Herkko Meht\u00e4l\u00e4\", \"Jyv\u00e4skyl\u00e4\", \"Opiskelija\"); INSERT INTO arvioija VALUES(1, \"Herkko Meht\u00e4l\u00e4\", \"Opiskelija\"); INSERT INTO taito VALUES(1, \"Python\", \"Python koodaus\", \"Koodaus\"); INSERT INTO taitoarvio VALUES(1, 1, 5, 1);","title":"Kertausharjoitus"},{"location":"Harjoitus9/#kertausharjoitus","text":"","title":"Kertausharjoitus"},{"location":"Harjoitus9/#harjoitus-9-tehtava-1","text":"Teht\u00e4v\u00e4: Suunnittele ja toteuta tietokanta. Aihe: todennetun osaamisen rekisteri (TOR) Toimeksiantaja: Opetus- ja kulttuuriministeri\u00f6 tai esim. yrityksen/oppilaitoksen projektitoimisto. Lis\u00e4tietoja: Ari Rantala. Pakolliset toiminnot/tallennettavat tiedot: Henkil\u00f6tietojen yll\u00e4pito (v\u00e4hint\u00e4\u00e4n henkil\u00f6n nimi) Osaamistietojen yll\u00e4pito (v\u00e4hint\u00e4\u00e4n taidon nimi ja tarkempi kuvaus) Henkil\u00f6n tekem\u00e4 itsearvio ja/tai asiantuntijan tekem\u00e4 arvio henkil\u00f6n osaamisesta (asteikolla 0-10) Lis\u00e4tietoja ja -vaatimuksia: Esimerkkej\u00e4 osaamisista, osaamiskuvauksista ja niiden ryhmittelyist\u00e4. Tietokantaan ei tallenneta henkil\u00f6ille osaamistietoa ilman arviota (itsearvio tai asiantuntijan arvio) Henkil\u00f6tietoina tulee voida tallentaa tieto henkil\u00f6n tyypist\u00e4 kuvauksineen (esim. Tavis -> Tavallinen arvioitava; Asiantuntija -> OKM:n asiantuntija-arvioija; ...) Yksi arvioija voi antaa tietylle henkil\u00f6lle VAIN YHDEN arvion yht\u00e4 osaamista kohti! T\u00e4st\u00e4 voin aloittaa k\u00e4sitteiden kartoittamisen: Henkil\u00f6tiedot Henkil\u00f6tunnus (ID) Henkil\u00f6n nimi Kotikaupunki Henkil\u00f6kuvaus Osaamistiedot TaitoID Taidon nimi Taidon lyhyt kuvaus Kategoria Osaamisen arvio ArvioID ArvioitavaHenkil\u00f6 Taito Osaaminen Arvioija N\u00e4ist\u00e4 k\u00e4sitteist\u00e4 voin luoda nopean ER-kaavion: HUOM Kuvassa Arvioija ja TaitoArvion taulujen relaation p\u00e4\u00e4t ovat v\u00e4\u00e4rinp\u00e4in! T\u00e4st\u00e4 voi hahmotella tietokannan rakenteen helposti. ER-kaavion mukaan: Tietyll\u00e4 taidolla voi olla monta arviota, mutta yhdell\u00e4 arviolla voi olla vain yksi tietty taito. Yhdell\u00e4 arviolla voi olla vain yksi arvioija. * Henkil\u00f6ll\u00e4 voi olla monta taitoa ja arviota, mutta tietty arvio on vain yhdelle henkil\u00f6lle. T\u00e4st\u00e4 voin rakentaa EER-kaavion MySQL Workbench:siss\u00e4. Kun t\u00e4m\u00e4 tehd\u00e4\u00e4n Forward engineer -optiolla, saadaan t\u00e4st\u00e4 seuraava SQL-komento: -- MySQL Workbench Forward Engineering SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'; -- ----------------------------------------------------- -- Schema mydb -- ----------------------------------------------------- -- ----------------------------------------------------- -- Schema mydb -- ----------------------------------------------------- CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ; USE `mydb` ; -- ----------------------------------------------------- -- Table `mydb`.`Henkilo` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `mydb`.`Henkilo` ( `Henkilotunnus` INT NOT NULL, `Nimi` VARCHAR(45) NOT NULL, `Kotikunta` VARCHAR(45) NULL, `HenkiloKuvaus` VARCHAR(64) NULL, PRIMARY KEY (`Henkilotunnus`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `mydb`.`Taito` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `mydb`.`Taito` ( `TaitoID` INT NOT NULL, `Taito` VARCHAR(45) NOT NULL, `Kuvaus` VARCHAR(45) NOT NULL, PRIMARY KEY (`TaitoID`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `mydb`.`Arvioija` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `mydb`.`Arvioija` ( `ArvioijaID` INT NOT NULL, `Nimi` VARCHAR(45) NOT NULL, `Kuvaus` VARCHAR(45) NOT NULL, PRIMARY KEY (`ArvioijaID`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `mydb`.`TaitoArvio` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `mydb`.`TaitoArvio` ( `Taito_TaitoID` INT NOT NULL, `Henkilo_Henkilotunnus` INT NOT NULL, `Arvo` INT NOT NULL, `Arvioija` INT NOT NULL, PRIMARY KEY (`Taito_TaitoID`, `Henkilo_Henkilotunnus`), INDEX `fk_Taito_has_Henkilo_Henkilo1_idx` (`Henkilo_Henkilotunnus` ASC), INDEX `fk_Taito_has_Henkilo_Taito_idx` (`Taito_TaitoID` ASC), INDEX `fk_TaitoArvio_Arvioija1_idx` (`Arvioija` ASC), CONSTRAINT `fk_Taito_has_Henkilo_Taito` FOREIGN KEY (`Taito_TaitoID`) REFERENCES `mydb`.`Taito` (`TaitoID`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Taito_has_Henkilo_Henkilo1` FOREIGN KEY (`Henkilo_Henkilotunnus`) REFERENCES `mydb`.`Henkilo` (`Henkilotunnus`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_TaitoArvio_Arvioija1` FOREIGN KEY (`Arvioija`) REFERENCES `mydb`.`Arvioija` (`ArvioijaID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; SET SQL_MODE=@OLD_SQL_MODE; SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS; Huomasin, ett\u00e4 taito -p\u00f6yd\u00e4st\u00e4 puuttuu \"kategoria\" -attribuutti, joten lis\u00e4\u00e4n sen komennolla: ALTER TABLE taito ADD kategoria varchar(45);","title":"Harjoitus 9 - Teht\u00e4v\u00e4 1"},{"location":"Harjoitus9/#harjoitus-9-tehtava-2","text":"Lis\u00e4\u00e4 TOR-tietokantaasi tietoa siten, ett\u00e4 jokaisessa taulussa on v\u00e4hint\u00e4\u00e4n kaksi rivi\u00e4 ja sinne on tallennettuna: Ainakin kahden tavallisen ja kahden asiantuntijan kuvitteelliset tiedot Ainakin kaksi erilaista osaamista per osaamisryhm\u00e4 (Tekniset p\u00e4tevyydet, jne.) * Itsearvioita ja asiantuntija-arvioita ainakin parille henkil\u00f6lle siten, ett\u00e4 pystyt\u00e4\u00e4n laskemaan keskiarvoja osaamisittain ja osaamisryhmitt\u00e4in. Lis\u00e4\u00e4n tietokantaani tietoa henkil\u00f6ist\u00e4, taidoista ja arvioijista. Lis\u00e4\u00e4n tietokannan p\u00f6ytiin uusia rivej\u00e4 INSERT INTO -komennolla: T\u00e4m\u00e4 tehd\u00e4\u00e4n muillekkin tiedoille, kunnes minulla on tarpeeksi tietoja tauluissa: Nyt osaamistietokannassani on tietoa! MySQL koodia: INSERT INTO henkilo VALUES(1, \"Herkko Meht\u00e4l\u00e4\", \"Jyv\u00e4skyl\u00e4\", \"Opiskelija\"); INSERT INTO arvioija VALUES(1, \"Herkko Meht\u00e4l\u00e4\", \"Opiskelija\"); INSERT INTO taito VALUES(1, \"Python\", \"Python koodaus\", \"Koodaus\"); INSERT INTO taitoarvio VALUES(1, 1, 5, 1);","title":"Harjoitus 9 - Teht\u00e4v\u00e4 2"}]}